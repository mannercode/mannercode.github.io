<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-04-27T07:47:36+00:00</updated><id>/feed.xml</id><title type="html">Manner Code</title><subtitle>Refactoring, Design Patterns, OOP, TDD, DDD, and Software Architecture.
</subtitle><author><name>mannercode</name><email>mannercode@gmail.com</email></author><entry><title type="html">소프트웨어 설계 - 영화 예매 시스템#1</title><link href="/2025/04/01/movie-booking-system-1.html" rel="alternate" type="text/html" title="소프트웨어 설계 - 영화 예매 시스템#1" /><published>2025-04-01T00:00:00+00:00</published><updated>2025-04-01T00:00:00+00:00</updated><id>/2025/04/01/movie-booking-system-1</id><content type="html" xml:base="/2025/04/01/movie-booking-system-1.html"><![CDATA[<p>소프트웨어는 복잡하기 때문에 체계적인 설계를 바탕으로 구현하는 것이 중요하다. 그래서 새로운 프로젝트를 시작할 때마다 제대로 된 설계를 해보려고 노력한다. 하지만 막상 설계 문서를 작성하려 하면, 머릿속에 있는 생각을 구체적으로 표현하는 일이 생각보다 쉽지 않다.</p>

<p>이러한 어려움을 극복하고자 UML을 학습하고 시퀀스 다이어그램도 그려보지만, 여전히 설계의 효과를 실감하기는 어렵다. 직접 코딩하는 것과 별반 차이가 없다고 느껴지기 때문이다.</p>

<p>이 글에서는 영화 예매 시스템을 실제로 설계해가면서 이러한 고민들을 구체적으로 풀어보려 한다.</p>

<p>기본적으로 이 글의 주제는 소프트웨어 설계지만, 테스트 주도 개발(TDD)에 관한 내용도 함께 다룰 것이다. 현대적인 개발 환경에서는 기본적으로 테스트 도구를 지원하며, 유명한 오픈소스 프로젝트들을 살펴봐도 일정 수준 이상의 테스트 환경을 갖추고 있다. 이는 그만큼 테스트의 중요성과 활용도가 높다는 의미일 것이다.</p>

<p>하지만 현실에서는 TDD는커녕 테스트 자동화조차 제대로 구축하지 않은 경우가 많다. 아무런 준비 없이 의미 있는 테스트를 먼저 작성하는 것은 결코 쉽지 않은데, 이는 소프트웨어 설계 역량이 함께 갖추어져야 가능한 일이기 때문이다. 따라서 설계와 TDD를 함께 다루는 것이 효율적이라고 판단했다.</p>

<h2 id="1-목표-정하기">1. 목표 정하기</h2>

<p>우리는 도메인 전문가와 첫 미팅을 한다. 도메인 전문가는 우리가 만들어야 할 시스템에 대해 많은 이야기를 해주는데, 주요 내용을 정리하면 다음과 같다.</p>

<ol>
  <li>극장이 많다. 전국에 극장 500개, 상영관은 약 4,000개 정도다. 물론 앞으로 더 늘어날 수 있다.</li>
  <li>현재는 영화 예매 기능만 지원하지만 향후에는 대형 공연 예매 기능도 추가할 예정이다.</li>
  <li>좌석이 중복 예약되면 안 된다. 예전에 그런 문제로 고객센터에서 고생을 많이 했다.</li>
  <li>기존에 사용하던 데이터는 그대로 유지해야 한다. 영화 정보나 감상평 등 이미 축적된 데이터가 많다.</li>
  <li>그 외, 기존 시스템을 운영하며 경험한 여러 불편 사항들…</li>
</ol>

<p>도메인 전문가는 중요하다고 생각하는 정보를 최대한 많이 전달했지만, 개발자 입장에서는 추가적인 확인이 필요하다.</p>

<ol>
  <li>대형 공연 예매 기능은 언제 추가될 예정인가? 이번 프로젝트의 범위에 포함해야 하는가?</li>
  <li>기존 데이터를 유지한다는 말은 DB 시스템을 바꾸면 안 된다는 의미인가? DB를 사용하는 다른 서비스가 있는가?</li>
</ol>

<p>도메인 전문가는 이렇게 답변한다.</p>

<ol>
  <li>대형 공연은 아직 구체적인 일정이 없다. 다만 향후 업그레이드를 수월하게 할 수 있도록 이번 프로젝트에서 어느 정도 고려하면 좋겠다.</li>
  <li>DB를 사용하는 다른 서비스는 없다. 기존 데이터가 유지되기만 하면 된다.</li>
</ol>

<p>이런 대화를 반복하면서 우리는 요구사항을 다음과 같이 정리할 수 있다.</p>

<pre><code class="language-txt">최우선 요구사항

1. 극장은 최소 500개, 상영관은 최소 4,000개 이상
2. 좌석 중복 예약 방지 필수
3. 기존 데이터 마이그레이션 필수
</code></pre>

<p>대형 공연에 관한 내용은 문서에서 빠졌는데, 프로젝트 범위가 아니고 요구사항이 명확하지도 않기 때문이다. 언제 필요할지 모르겠지만 그 때 가서 다시 검토해야 하는 문제다.</p>

<p>이렇게 도메인 전문가가 전해주는 정보를 개발자 입장에서 해석하고 정리하는 것으로 프로젝트를 시작할 수 있다.</p>

<blockquote>
  <p>비록 문서에 기록하지 않더라도 도메인 전문가에게는 ‘대형 공연’도 잘 고려하겠다는 답변을 잊으면 안 된다.</p>
</blockquote>

<h2 id="2-프로젝트-이름-정하기">2. 프로젝트 이름 정하기</h2>

<p>도메인 전문가와 함께 프로젝트의 목표가 어느 정도 정해졌다면, 이제 프로젝트 이름을 정할 차례다.</p>

<p>우선 도메인 전문가에게 의견을 물어보자. 도메인 전문가는 자연스럽게 <code class="language-plaintext highlighter-rouge">영화 예매 시스템</code>이라는 이름을 제안한다.</p>

<p><object data="/uml/fcccd7785d8e28e20ccae835048f119c.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>도메인 전문가의 입장에서는 한글로 된 <code class="language-plaintext highlighter-rouge">영화 예매 시스템</code>이 더 친숙하고 명확할지도 모른다. 하지만 개발자의 입장에서 보면, 프로젝트 이름을 포함한 모든 용어는 코드상으로 직접 구현되기 때문에 가급적 영어로 정의하는 것이 여러모로 유리하다.</p>

<p>그래서 우리는 도메인 전문가에게 이 점을 충분히 설명하고, <code class="language-plaintext highlighter-rouge">Movie Booking System</code>이라는 이름을 제안할 수 있다.</p>

<p><object data="/uml/7af1c2f7b1fda77d60a2e9e092324e21.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>앞서 ‘대형 공연 예매’ 기능에 대해서도 신경 쓰겠다고 잘 전달했다면, 도메인 전문가는 흔쾌히 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>이라는 이름을 받아들일 것이다.</p>

<blockquote>
  <p>혹시 순수하고 정직한 마음을 가진 개발자라면 ‘대형 공연’에 대해 신경 쓰지 않을 예정이라는 사실에 죄책감을 느낄지도 모르겠다. 하지만 걱정하지 않아도 된다. ‘대형 공연’이 정말 중요했다면 도메인 전문가는 처음부터 프로젝트 이름으로 ‘영화 예매 시스템’을 제안하지 않았을 것이다. 아마 ‘티켓 예매 시스템’이나 더 범용적인 ‘예매 시스템’ 같은 이름을 제안했을 것이다. 그러니 지금 상황에서 ‘대형 공연’이란 요구사항은 그냥 가벼운 언급 정도로 받아들이면 된다.</p>
</blockquote>

<h2 id="3-사용자">3. 사용자</h2>

<p>프로젝트의 이름을 정했다면 이제 누가 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>을 사용하는지 알아볼 차례다.</p>

<p>물론 이에 대한 정보는 도메인 전문가가 알고 있을 것이고, 그렇게 우리는 <code class="language-plaintext highlighter-rouge">customer</code>와 <code class="language-plaintext highlighter-rouge">administrator</code>의 존재를 알게 된다.</p>

<p><object data="/uml/1d58eb92b6786ab837141345916198b8.svg" type="image/svg+xml" class="plantuml"></object></p>

<h2 id="4-외부-의존-관계">4. 외부 의존 관계</h2>

<p>설계 초기에 놓치기 쉬운 요소 중 하나가 바로 외부 의존성이다.</p>

<p>외부 의존성이란 기존에 존재하는 레거시 시스템(legacy system)이 될 수도 있고, 결제 시스템(payment gateway)일 수도 있다. 이러한 의존 관계는 전체 시스템 설계에 큰 영향을 미칠 수 있기 때문에, 가능하면 초기에 명확히 파악하는 것이 좋다.</p>

<p>다행히도 <code class="language-plaintext highlighter-rouge">Payment Gateway</code>나 <code class="language-plaintext highlighter-rouge">Legacy System</code> 같은 요소들은 기존 시스템에서 이미 사용하고 있기 때문에 비교적 수월하게 파악할 수 있다.</p>

<p><object data="/uml/f77f4edfb179014880cf0479e23848b3.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>이 밖에도 흔히 간과하기 쉬운 외부 환경 요소들이 존재한다. 예를 들어, 전국에 분포된 극장들이 서로 다른 시간대에 위치해 있다면, 우리의 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>은 자연스럽게 <code class="language-plaintext highlighter-rouge">Time Zone</code>이라는 환경적 요소에 영향을 받을 수밖에 없다.</p>

<p><object data="/uml/55a9f0411ea25cb180d7ec686a672933.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>이런 요소들은 도메인 전문가에게 직접 물어보지 않으면 놓치기 쉽다. 도메인 전문가는 이 부분을 너무 당연하게 여겨 설명을 생략할 수도 있기 때문이다.</p>

<p>개발자에 따라서는 <code class="language-plaintext highlighter-rouge">Time Zone</code>을 유스케이스 다이어그램에 넣는 것을 부자연스럽게 느낄 수도 있다. UML을 어떻게 사용해야 한다고 엄격하게 규정할 필요는 없다. 개발하려는 시스템의 의존 관계를 표현하는데 있어서 모두가 이해하기 쉬운 방법이라면 얼마든지 허용 가능하다.</p>

<blockquote>
  <p>추상적인 생각을 물리적인 형태로 표현하려면 충분히 유연한 도구여야 한다.</p>
</blockquote>

<p>아참, 위의 다이어그램은 사실 Context Diagram이다. 용어 자체에 집중하면 본질에 다소 소홀해지기 쉬운 것 같다. 그래서 이후 설명에서도 전문용어 사용을 최소화 하려고 한다.</p>

<h2 id="5-유스케이스">5. 유스케이스</h2>

<p>의존 관계까지 명시하면서 대략적인 개발 범위를 파악한 것 같다. 이제 본격적으로 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>의 내부에 집중해 보자.</p>

<p>일단, 편의를 위해서 의존 관계는 숨기고 사용자만 남겨 놓는다.</p>

<p><object data="/uml/1d58eb92b6786ab837141345916198b8.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>여기서 드는 궁금증은 <code class="language-plaintext highlighter-rouge">customer</code>와 <code class="language-plaintext highlighter-rouge">administrator</code>가 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>에서 무엇을 하는가이다. 결국 그것이 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>이 제공해야 하는 기능일테니까 말이다.</p>

<h3 id="51-customer의-유스케이스">5.1. customer의 유스케이스</h3>

<p><code class="language-plaintext highlighter-rouge">customer</code>가 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>에서 무슨 일을 하는지 도메인 전문가에게 물어보니 이렇게 알려준다.</p>

<ul>
  <li>영화 검색하기</li>
  <li>영화 상세 정보 보기</li>
  <li>상영 시간 선택하기</li>
  <li>좌석 선택하기</li>
  <li>영화 예매하기</li>
  <li>예매 내역 확인하기</li>
  <li>예매 취소하기</li>
</ul>

<p>우리는 도메인 전문가에게 다시 확인을 해본다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">상영 시간 선택하기</code>, <code class="language-plaintext highlighter-rouge">좌석 선택하기</code>는 <code class="language-plaintext highlighter-rouge">영화 예매하기</code>의 한 과정인가?</li>
  <li><code class="language-plaintext highlighter-rouge">영화 예매하기</code>, <code class="language-plaintext highlighter-rouge">예매 취소하기</code>는 결국 티켓을 구입하고 환불하는 것 아닌가?</li>
</ul>

<p>개발자의 질문에 도메인 전문가는 맞다고 확인을 해준다. 그래서 우리는 아래와 같이 유스케이스를 정리할 수 있다.</p>

<p><object data="/uml/0bafdd508509475b7f4af1df10470955.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>우리는 도메인 전문가가 아니다. 그런데 어떻게 <code class="language-plaintext highlighter-rouge">상영 시간 선택하기</code>와 <code class="language-plaintext highlighter-rouge">좌석 선택하기</code>가 <code class="language-plaintext highlighter-rouge">영화 예매하기</code>의 한 과정이냐고 물어볼 수 있었을까?</p>

<p>예를 들어 <code class="language-plaintext highlighter-rouge">상영 시간 선택하기</code>에 대해서 도메인 전문가에게 이렇게 물어볼 수 있다.</p>

<ol>
  <li>상영 시간 선택하기가 뭐죠?</li>
  <li>화면에 뭐가 있어야 하죠?</li>
  <li>영화가 선택되어 있어야 할 것 같은데 다른 사전 조건은 뭔가요?</li>
</ol>

<p>이렇게 각각의 케이스에 대해 사용자와 어떤 액션을 주고받는지를 정리하다 보면 자연스럽게 정리가 되는 것이다. 프로젝트 상황에 따라서 이 과정을 몇 번씩 반복할 수도 있지만 여유를 갖고 세심하게 분석할수록 설계와 구현 단계에서 시행착오를 줄일 수 있다.</p>

<p>지금은 구두로 문답을 주고받았지만 다른 다이어그램을 사용해서 정리하는 방법도 있을 것이다. 상황에 맞게 도구를 사용하면 된다.</p>

<h3 id="52-administrator의-유스케이스">5.2. administrator의 유스케이스</h3>

<p>administrator는 무슨 일을 할까? 관리자니까 당연히 관리를 할 것이다. 무엇을 관리할까?</p>

<ol>
  <li>영화 관리</li>
  <li>극장 관리</li>
  <li>고객 관리</li>
  <li>티켓 관리</li>
  <li>상영시간 관리</li>
</ol>

<p><object data="/uml/32ad2a4f85031ed6003497d2ba07902d.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>개인적으로 개발에서 manage라는 단어를 조심하는 편이다. manage는 표현이 너무 포괄적이라서 무슨 일을 하는지 모호하다. 여기서도 마찬가지인데 구체적으로 어떻게 관리한다는 것인지 잘 모르겠다. 도메인 전문가와 함께 좀 더 세분화 해보자.</p>

<p><object data="/uml/5f7d98dc790a085cc0125f13b5640f56.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>실제 프로젝트라면 이것보다 더 많은 유스케이스가 있겠지만, 여기서는 단순화했다. 그럼에도 불구하고 중요한 개념들이 상당수 드러난다.</p>

<p>여기서 주목할 것은 상영 시간을 생성하면 티켓도 같이 생성해야 하는 것을 알 수 있다. 그리고 티켓을 구매하거나 환불할 때 <code class="language-plaintext highlighter-rouge">PaymentGateway</code>와 상호작용이 필요함을 언급했다.</p>

<h3 id="53-최종-유스케이스">5.3. 최종 유스케이스</h3>

<p>customer와 administrator의 유스케이스를 합쳐보자.</p>

<p><object data="/uml/11ac305d320cf2cdb29fd255d3276527.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>합쳐보니 조금 복잡하다. 실제 프로젝트라면 훨씬 더 복잡했을 것이다. 이런 경우 무리하게 합칠 필요는 없다.</p>

<p>이 글에서는 백엔드를 대상으로 하는 설계라서 <code class="language-plaintext highlighter-rouge">SearchTheaters</code> 같은 단순한 유스케이스는 생략한다. 그러나 실제 프로젝트라면 이런 유스케이스도 모두 중요하다. 특히 화면 기획자 입장에서 이런 유스케이스는 좋은 출발점이 되기 때문이다.</p>

<h3 id="54-유스케이스가-많다면">5.4. 유스케이스가 많다면</h3>

<p>지금은 작은 프로젝트이기 때문에 괜찮지만 프로젝트가 크고 복잡하다면 도메인 전문가는 어디부터 설명을 해야할지 난감해 할 수도 있다.
이럴 땐 액터가 충분했는지 다시 점검해보자. 초기에 <code class="language-plaintext highlighter-rouge">administrator</code>라고 했지만 역할에 따라 세분화 할 수 있을지도 모른다. 그리고 <code class="language-plaintext highlighter-rouge">Movie Booking System</code>을 사용하는 외부 서비스가 있을 지도 모른다.</p>

<p><object data="/uml/4365574595574212ed9d096b8d519545.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>이렇게 액터를 세분화 한다면 도메인 전문가는 보다 체계적으로 정보를 알려줄 수 있을 것이다.</p>

<p>물론, 이것은 복잡한 도메인을 분석하는 한 예일 뿐이다. 다른 좋은 방법이 얼마든지 있을 것이다.</p>

<h2 id="6-결론">6. 결론</h2>

<p>이번 글에서는 유스케이스 다이어그램을 활용하여 프로젝트의 목표를 설정하고, 초기 분석 단계를 진행해 보았다. 다음 글에서는 여기서 도출한 주요 유스케이스를 더욱 상세히 분석하는 방법을 알아볼 것이다.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[소프트웨어는 복잡하기 때문에 체계적인 설계를 바탕으로 구현하는 것이 중요하다. 그래서 새로운 프로젝트를 시작할 때마다 제대로 된 설계를 해보려고 노력한다. 하지만 막상 설계 문서를 작성하려 하면, 머릿속에 있는 생각을 구체적으로 표현하는 일이 생각보다 쉽지 않다.]]></summary></entry><entry><title type="html">Essence-Based Interpretation</title><link href="/2024/05/04/ebi-en.html" rel="alternate" type="text/html" title="Essence-Based Interpretation" /><published>2024-05-04T00:00:00+00:00</published><updated>2024-05-04T00:00:00+00:00</updated><id>/2024/05/04/ebi-en</id><content type="html" xml:base="/2024/05/04/ebi-en.html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>

<p>I’ve put a lot of effort into writing good code. In pursuit of good code, I’ve studied refactoring, design patterns, various architectures, and development methods. Even when my code was working well, I often spent considerable time deliberating over a better structure or naming.</p>

<p>Nevertheless, I sometimes couldn’t find a definitive answer when it came time to choose between different approaches. One day I’d implement it one way, the next day another way, and this went on for a long time. Both methods had clear pros and cons, so whichever approach I chose, there was a sense of regret. Here, “method” could refer to a design pattern or simply the name of a function or variable.</p>

<p>At that point, I thought I had a certain level of competency as a developer, but these decision-making dilemmas didn’t seem like they would ever go away, no matter how much experience or effort I accumulated. I even considered the possibility that there was no single correct answer, that it all depended on personal preference—like an art form. Perhaps it was a sort of defense mechanism, similar to how some developers who don’t fully understand design patterns dismiss them as useless in the real world.</p>

<p>Then I suddenly realized what I had been missing. Let’s look at a few examples and figure out what that was.</p>

<h2 id="2-implementing-directional-keys">2. Implementing Directional Keys</h2>

<p>We need to provide a directional keypad for users where they can choose “Up/Down/Left/Right.” These four arrow icons look identical but point in different directions. There are two ways to implement this directional keypad.</p>

<p><img src="/assets/images/virtual-gamepad.jpg" alt="gamepad" /> <br />
<strong>Figure 2-1. A gamepad with identical-looking directional keys</strong></p>

<h3 id="21-method-1--reusing-one-image-with-rotation">2.1. Method #1 – Reusing one image with rotation</h3>

<p><code class="language-plaintext highlighter-rouge">Method #1</code> uses a single arrow image (arrow.png) that is rotated to point in the different directions. Since the arrow shape is identical, it can be done easily.</p>

<p>This approach has the advantage of using less storage space. However, the downside is that the code readability can be relatively lower.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"180"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"-90"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"90"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><img src="/assets/images/arrows1.svg" alt="arrow1" /> <br />
<strong>Figure 2-2. A directional key implemented by rotating a single image</strong></p>

<h3 id="22-method-2--using-four-separate-images">2.2. Method #2 – Using four separate images</h3>

<p><code class="language-plaintext highlighter-rouge">Method #2</code> uses four separate images for up, down, left, and right.</p>

<p>The downside is that you have to manage more image resources, and the storage space usage also increases. On the other hand, the readability of the code is relatively better.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"up.png"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"down.png"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"let.png"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"right.png"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><img src="/assets/images/arrows2.svg" alt="arrow2" /> <br />
<strong>Figure 2-3. A directional key implemented with four images for up/down/left/right</strong></p>

<h3 id="23-which-method-is-correct">2.3. Which method is correct?</h3>

<p>Which one is correct? Or is there even a “right” or “wrong” choice here? Is it just a matter of personal philosophy? If you pursue efficiency, then <code class="language-plaintext highlighter-rouge">Method #1</code> is for you, but if you want more readable code, you’d pick <code class="language-plaintext highlighter-rouge">Method #2</code>.</p>

<p>Is readable code correct? Or is performance-efficient code correct? In the past, performance efficiency might have been the priority, but in modern times where hardware performance is sufficient, readability often takes precedence. Should we then just choose the path of readability?</p>

<p>Many thoughts may come to mind, but the first thing to consider is the meaning of the arrow itself. If the arrow is something like <strong>Figure 2-4</strong>, indicating a specific object, then implementing it by rotating a single arrow image (like <code class="language-plaintext highlighter-rouge">Method #1</code>) makes sense.</p>

<p><img src="/assets/images/arrows3.svg" alt="arrow3" /> <br />
<strong>Figure 2-4. Arrows used to point to something</strong></p>

<p>But the user might have had in mind a directional keypad like <strong>Figure 2-5</strong>, the set of four arrow keys in the corner of a keyboard. In that case, four separate images (like <code class="language-plaintext highlighter-rouge">Method #2</code>) correspond more closely to what the user expects.</p>

<p><img src="/assets/images/arrows4.svg" alt="arrow4" /> <br />
<strong>Figure 2-5. A directional key with four distinct arrow shapes</strong></p>

<p>You might think there’s no big difference since the final result the user sees is the same, regardless of which method you choose. But what happens if you ignore the user’s perspective and only focus on implementation convenience?</p>

<p>The user might assume that changing the shape of the arrow keys is easy at any time, because they believe the keypad is made up of four separate images. Rotating a single image for performance optimization is purely a developer’s concern. Then one day, the user might ask you to change the directional keys to look like <strong>Figure 2-4</strong>. They’d think it’s just a simple image replacement, but for the developer, it becomes a major task that may require changing the entire approach.</p>

<p>The fact that the arrows happened to look the same initially is simply a coincidence. If you reflect that coincidence in the code, you drift further from the user’s thoughts and expectations. In other words, if you ignore the user’s intent and pursue only implementation convenience, maintenance becomes increasingly difficult.</p>

<h3 id="24-the-difficulty-of-interpretation">2.4. The difficulty of interpretation</h3>

<p>One reason it can be tough to discern the essence of a requirement is that some obvious information gets omitted.</p>

<p>When the user mentioned the need for “directional keys,” they probably didn’t explicitly say “the four arrow keys on a keyboard.” From the user’s standpoint, “directional keys” simply implies those keyboard arrows in the corner.</p>

<p>From a developer’s standpoint, though, if the requirement doesn’t detail that specific keyboard arrow concept, there’s more to ponder about how to implement it.</p>

<p>That’s where interpretation gets tricky: the parts that seem obvious and thus remain unspecified still have to be filled in by the developer. And to fill in those blanks, the developer must consider all the reasons and processes behind the requirement, which demands a wealth of experience and insight.</p>

<p>What if you still can’t pinpoint the user’s exact intent in this scenario? Or you can’t predict how it might change?</p>

<p>You could do something like the following—define <code class="language-plaintext highlighter-rouge">Up, Down, Left, Right</code> classes—so that no matter how the requirement for the arrows changes, it has minimal impact on the rest of the code.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span><span class="o">&gt;</span>
    <span class="kd">const</span> <span class="nx">Up</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="kd">const</span> <span class="nx">Down</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">180</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="kd">const</span> <span class="nx">Left</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">-90</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="kd">const</span> <span class="nx">Right</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">90</span><span class="dl">"</span> <span class="o">/&gt;</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;Up</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Down</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Left</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Right</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<h2 id="3-shallow-routing-vs-nested-routing-in-rest-apis">3. Shallow Routing vs. Nested Routing in REST APIs</h2>

<p><strong>Figure 3-1</strong> is a sequence diagram of how a user selects a movie, theater, and date/time in a movie ticketing system. How should we design the routing for a REST API in this situation?</p>

<p><object data="/uml/fc78dca9f222ff5d2dda914cfcd14902.svg" type="image/svg+xml" class="plantuml"></object></p>
<p><strong>Figure 3-1</strong></p>

<h3 id="31-shallow-routing">3.1. Shallow Routing</h3>

<p>If we design the REST API in the <code class="language-plaintext highlighter-rouge">Shallow Routing</code> style, it might look like this:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Request list of showing movies</span>
/movies?status<span class="o">=</span>showing

<span class="c"># Request list of theaters</span>
/theaters?movieId<span class="o">={</span>movidId<span class="o">}</span>

<span class="c"># Request list of show dates</span>
/showdates?movieId<span class="o">={</span>movieId<span class="o">}</span>&amp;theaterId<span class="o">={</span>theaterId<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Shallow Routing</code> lets you manage each resource independently, so it’s highly extensible. However, because it doesn’t clearly express relationships between resources, it can be challenging to represent complex hierarchical data.</p>

<h3 id="32-nested-routing">3.2. Nested Routing</h3>

<p>If we design the REST API in the <code class="language-plaintext highlighter-rouge">Nested Routing</code> style, it might look like this:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Request list of showing movies</span>
/showing/movies

<span class="c"># Request list of theaters</span>
/showing/movies/<span class="o">{</span>movieId<span class="o">}</span>/theaters

<span class="c"># Request list of show dates</span>
/showing/movies/<span class="o">{</span>movieId<span class="o">}</span>/theaters/<span class="o">{</span>theaterId<span class="o">}</span>/showdates
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Nested Routing</code> clearly represents the relationships between resources in the URL itself, making it suitable for complex resource structures. However, if the nested resource structure changes, the URL must also change, so it can be less flexible.</p>

<h3 id="33-which-method-is-correct">3.3. Which method is correct?</h3>

<p>We briefly looked at the pros and cons of the two routing methods. So how do you choose between the flexibility of <code class="language-plaintext highlighter-rouge">Shallow Routing</code> and the clarity of <code class="language-plaintext highlighter-rouge">Nested Routing</code>?</p>

<p>It depends on which design more closely reflects the conceptual perspective of the movie ticketing process.</p>

<p>From that angle, <code class="language-plaintext highlighter-rouge">Nested Routing</code> reflects the ticket purchase process directly. Just as you have to select a movie before you can choose a theater, in <code class="language-plaintext highlighter-rouge">Nested Routing</code>, you cannot specify a theater without specifying a movie. In other words, the <code class="language-plaintext highlighter-rouge">Nested Routing</code> REST API mirrors the ticket purchase process. You might not even need separate documentation for it—it’s that intuitive.</p>

<p>You often see debates about which is better: <code class="language-plaintext highlighter-rouge">Shallow Routing</code> or <code class="language-plaintext highlighter-rouge">Nested Routing</code>. Such debates can be endless. What’s important is which design more accurately reflects the requirements. If you approach it purely from a technical standpoint, where there’s no single right answer, the debate never ends.</p>

<blockquote>
  <p>If you’ve been agonizing for a while and still see no solution, perhaps the answer isn’t there to begin with.</p>
</blockquote>

<p>3.4. Inheritance vs. Composition</p>

<p>A similar debate exists around class inheritance vs. composition.</p>

<p>Just as many people perceive that Shallow Routing offers superior technical flexibility, it’s similarly agreed that you should favor composition over inheritance. However, once again, the domain concept is what really matters. Don’t prioritize technical superiority above all else.</p>

<p><object data="/uml/9f603402d37bffc94cd71f3d9fe52b9d.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>In the diagram above, a Dog is a type of Animal. Inheritance is a natural representation of that. However, an Engine is one of the components that make up a Car, so composition is more appropriate for that relationship.</p>

<h2 id="4-implementing-documents-of-a-similar-format">4. Implementing Documents of a Similar Format</h2>

<p>For documents like certificates of income, which may be used overseas, there are two authentication methods: “Apostille” and “Consular legalization.” Consular legalization is more common, while apostille is a simplified process under certain conventions.</p>

<p>In a project I worked on, the goal was to encrypt these documents and verify whether they had been tampered with.</p>

<p>Because the structures and fields of apostille and consular documents appeared similar, an existing system was using a single shared table for both.</p>

<p><object data="/uml/5cdb8613952a83bfc0d0c2aa82ccbf06.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="41-initial-design">4.1. Initial Design</h3>

<p>While analyzing the existing system, I suspected that the similarity between apostille and consular documents might just be a coincidence, and that they should not be treated as a single document type. If they were truly the same, the project wouldn’t have been titled “Apostille &amp; Consular Legalization.”</p>

<p>On the other hand, the back-end developer argued there was no need to separate them into two. Ultimately, we compromised by splitting the REST API into two but keeping a single shared table and service.</p>

<p><object data="/uml/ec5e5e2347907e077d1b58976807c9cf.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="42-design-change">4.2. Design Change</h3>

<p>As the project progressed, the differences between the two documents became more concrete. Apostille and consular documents could have overlapping document numbers, so their numbering systems diverged. Moreover, as service features expanded, their interfaces continued to diverge.</p>

<p>In the end, we decided to separate them completely into two tables and two services. Fortunately, because the external APIs were already split into two, changing the internal structure was relatively easy. Had we tried to avoid refactoring just because splitting them felt like too much trouble, we would have ended up with if-else statements all over the code, opening the gateway to chaos.</p>

<p><object data="/uml/92b9f1fa32a97ec298a8c11ad6c7b8fc.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="43-why-did-this-happen">4.3. Why did this happen?</h3>

<p>In this case, the two documents only seemed alike by coincidence. They were always prone to diverge based on user requirements. The real issue was overlooking the fact that they’re fundamentally different documents—hence having different names in the first place.</p>

<p>Programmers often have a tendency to prioritize implementation convenience. It’s not easy to break that habit. However, you must adhere to the domain concepts rigorously.</p>

<h2 id="5-storing-encoded-filenames">5. Storing Encoded Filenames</h2>

<p><object data="/uml/e2e215b41740c7b53974ef040726f7b6.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>Suppose a user wants to upload a file named <code class="language-plaintext highlighter-rouge">한글.txt</code> via a web browser.</p>

<p>Because the filename contains special characters, it must be URL-encoded when sent to the server. Likewise, when the file is downloaded, the filename must be URL-encoded again.</p>

<p>So, should the server store the encoded string (<code class="language-plaintext highlighter-rouge">%ED%95%9C%EA%B8%80.txt</code>) in the database as is? Or should it decode it back to <code class="language-plaintext highlighter-rouge">한글.txt</code> before storing?</p>

<p>If you store it as <code class="language-plaintext highlighter-rouge">한글.txt</code>, you’ll have to encode it again when sending it back to the user for download. Isn’t it more efficient to just store it as <code class="language-plaintext highlighter-rouge">%ED%95%9C%EA%B8%80.txt</code>?</p>

<p>To figure out the essence, consider what the user perceives. They see their file as <code class="language-plaintext highlighter-rouge">한글.txt</code>. They don’t think it’s going to be changed into something else. Therefore, storing it as <code class="language-plaintext highlighter-rouge">한글.txt</code> aligns better with the user’s perspective.</p>

<p>URL encoding is required by ASCII restrictions in certain protocols. It’s not a user requirement. Letting specific technical constraints bleed into other layers is not a good design. That’s why any issues with HTML or protocol limitations should be resolved at that layer, rather than propagating them all the way to the database. The priority should be accurately reflecting the user’s intention, with optimizations considered afterward.</p>

<p>If you only ever needed the download feature, storing the filename as received might be the simplest. But as soon as you add features like listing files or searching by filename, you’ll need the original filename (<code class="language-plaintext highlighter-rouge">한글.txt</code>) because that’s what the user understands. If you saved it as <code class="language-plaintext highlighter-rouge">%ED%95%9C%EA%B8%80.txt</code>, searching or listing could become problematic.</p>

<p>When you prioritize implementation convenience, even minor changes can throw you off balance. By contrast, if you grasp the essence in your design, you’ll handle unexpected changes much more smoothly.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Will you display encoded filenames?</span>
<span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">95</span><span class="o">%</span><span class="mi">9</span><span class="nx">C</span><span class="o">%</span><span class="nx">EA</span><span class="o">%</span><span class="nx">B8</span><span class="o">%</span><span class="mi">80</span><span class="p">.</span><span class="nx">txt</span>
<span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">85</span><span class="o">%</span><span class="mi">8</span><span class="nx">C</span><span class="o">%</span><span class="nx">EC</span><span class="o">%</span><span class="mi">8</span><span class="nx">A</span><span class="o">%</span><span class="nx">A4</span><span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">8</span><span class="nx">A</span><span class="o">%</span><span class="nx">B8</span><span class="p">.</span><span class="nx">jpg</span>
<span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">8</span><span class="nx">C</span><span class="o">%</span><span class="mi">8</span><span class="nx">C</span><span class="o">%</span><span class="nx">EC</span><span class="o">%</span><span class="mi">9</span><span class="nx">D</span><span class="o">%</span><span class="nx">BC</span><span class="p">.</span><span class="nx">json</span>

<span class="c1">// Or will you display original filenames?</span>
<span class="nx">한글</span><span class="p">.</span><span class="nx">txt</span>
<span class="nx">테스트</span><span class="p">.</span><span class="nx">jpg</span>
<span class="nx">파일</span><span class="p">.</span><span class="nx">json</span>
</code></pre></div></div>

<h2 id="6-conclusion">6. Conclusion</h2>

<p>From all the examples, a common thread emerges: focusing on <code class="language-plaintext highlighter-rouge">why</code> rather than “what.” The <code class="language-plaintext highlighter-rouge">what</code> is simply one way to reach the “why.” The purpose (why) rarely changes, but the method (what) can change freely depending on the situation.</p>

<p>Another critical reason to concentrate on <code class="language-plaintext highlighter-rouge">why</code> is that, during analysis, you can’t possibly document every single thought the user has. The same goes for the design phase: you can’t capture the designer’s every thought in the design document. The code is the closest thing to fully reflecting those requirements and designs. There will inevitably be gaps, aspects so obvious to the user that they didn’t think to specify them. The problem is that what the user takes for granted can be interpreted entirely differently by the developer.</p>

<p>However, if you keep your mind focused on the <code class="language-plaintext highlighter-rouge">why</code>, you end up looking in the same direction, so even if communication has some gaps, the discrepancy won’t be massive. Reducing that gap between the user and the developer is one of the main goals of Essence-Based Interpretation (EBI).</p>

<p>EBI is so fundamental and broad that it’s hard to define its scope or a concrete practice. And it’s not limited to software development.</p>

<p>EBI and Domain-Driven Design (DDD) share the view that you should center on the domain. However, DDD is more systematic and specific, aimed at handling complex or frequently changing domains. On the other hand, EBI is less a strict methodology and more a general mindset that can be applied in various fields, including software. In short, DDD focuses on “figuring out what the requirements are,” whereas EBI emphasizes “understanding why the requirements were defined that way” in the first place.</p>

<p>EBI might sound so obvious that giving it a grand name feels a bit embarrassing. Yet, I hope that clearly naming it as Essence-Based Interpretation helps developers—including myself—recognize its value.</p>

<p>The search for good code brings a shift in how we think and leads us to distill the essence, which in turn prepares us for unpredictable changes. This is a precious challenge unique to software development.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[1. Introduction]]></summary></entry><entry><title type="html">본질 기반 해석</title><link href="/2024/05/04/ebi.html" rel="alternate" type="text/html" title="본질 기반 해석" /><published>2024-05-04T00:00:00+00:00</published><updated>2024-05-04T00:00:00+00:00</updated><id>/2024/05/04/ebi</id><content type="html" xml:base="/2024/05/04/ebi.html"><![CDATA[<h2 id="1-소개">1. 소개</h2>

<p>나는 좋은 코드에 대해서 많은 노력을 해왔다. 좋은 코드를 작성하기 위해서 리팩토링과 디자인 패턴은 물론이고 여러 아키텍처와 개발 방법을 학습했다. 내가 작성한 코드가 잘 동작함에도 불구하고 더 나은 구조나 이름에 대해서 한참 고민하기도 했다.</p>

<p>그럼에도 불구하고 선택의 순간에 명확히 답을 내리지 못하고 오늘은 A방법으로 구현했다가 내일은 B방법으로 구현하는 일이 오랜시간 지속됐다. 왜냐하면 두 방법 모두 장단점이 명확했기 때문에 어느 한 방법을 선택해도 아쉬움이 남기 때문이다. 여기서 방법은 디자인 패턴이 될 수도 있고 함수나 변수의 이름일 수도 있다.</p>

<p>그 때의 나는 개발자로서 어느 정도 역량을 갖추고 있다고 생각했지만, 이런 선택의 고민은 아무리 많은 경험과 노력을 쌓아도 좀처럼 사라지지 않을 것만 같았다. 이 부분 만큼은 정답이 존재하지 않고 개인의 성향에 따른 선택이 있을 뿐인, 예술의 영역은 아닐까? 하는 생각도 했다. 그 만큼 나에게는 넘기 힘든 벽처럼 보였다. 마치 디자인 패턴을 이해하지 못하는 개발자들이 디자인 패턴은 실무에서 쓸모없다고 치부하는 것과 같은 방어기재였을지도 모르겠다.</p>

<p>그러다 문득 내가 놓치고 있던 것을 깨달았다. 먼저 몇 가지 사례를 살펴보고 그것이 무엇인지 알아보려고 한다.</p>

<h2 id="2-방향키의-구현">2. 방향키의 구현</h2>

<p>사용자에게 ‘상/하/좌/우’를 선택할 수 있는 방향키를 제공해야 한다. 4개 화살표의 모양은 동일하고 방향만 다르다. 이 때 방향키를 구현하는 방법이 두 가지 있다.</p>

<p><img src="/assets/images/virtual-gamepad.jpg" alt="방향키1" /> <br />
<em>[그림 2-1] 동일한 모양의 방향키를 가진 게임패드</em></p>

<h3 id="21-방법1---한-개의-이미지를-회전시켜서-재사용">2.1. 방법#1 - 한 개의 이미지를 회전시켜서 재사용</h3>

<p><code class="language-plaintext highlighter-rouge">방법#1</code>은 한 개의 화살표 이미지(arrow.png)를 회전시켜서 구현하는 것이다. 화살표의 모양은 동일하기 때문에 쉽게 구현할 수 있다.</p>

<p>이 방법은 저장 공간을 적게 차지하는 장점이 있다. 그러나 코드 가독성이 상대적으로 떨어진다는 단점이 있다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"180"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"-90"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"arrow.png"</span> <span class="na">rotate=</span><span class="s">"90"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><img src="/assets/images/arrows1.svg" alt="방향키1" /> <br />
<em>[그림 2-2] 한 개의 이미지를 회전시켜서 구현한 방향키</em></p>

<h3 id="22-방법2---4개의-이미지를-사용">2.2. 방법#2 - 4개의 이미지를 사용</h3>

<p><code class="language-plaintext highlighter-rouge">방법#2</code>는 상/하/좌/우에 해당하는 4개의 이미지를 사용하는 것이다.</p>

<p>이 방법은 더 많은 이미지 리소스를 관리하는 번거로움과 저장 공간도 더 많이 차지한다는 단점이 있다. 반면 코드의 가독성은 비교적 좋다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"up.png"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"down.png"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"let.png"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Image</span> <span class="na">src=</span><span class="s">"right.png"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><img src="/assets/images/arrows2.svg" alt="방향키2" /> <br />
<em>[그림 2-3] 상/하/좌/우 4개의 이미지로 구현한 방향키</em></p>

<h3 id="23-옳은-방법은-무엇일까">2.3. 옳은 방법은 무엇일까?</h3>

<p>무엇이 옳은 것일까? 혹은 이 선택에 있어서 옳고 그름이 존재하긴 하는 걸까? 그저 개인의 철학에 따른 선택만이 있는 것은 아닐까? 효율성을 추구한다면 <code class="language-plaintext highlighter-rouge">방법#1</code>이지만 읽기 쉬운 코드를 추구한다면 <code class="language-plaintext highlighter-rouge">방법#2</code>일 것이다.</p>

<p>읽기 쉬운 코드가 옳은가? 성능 효율적인 코드가 옳은가? 대체로 과거에는 성능 효율을 우선했겠지만 요즘처럼 하드웨어의 성능이 충분한 경우에는 읽기 쉬운 코드를 선호한다. 그런 이유로 읽기 쉬운 코드를 선택해야 할까?</p>

<p>다양한 생각들이 있겠지만 우선적으로 고려해야 하는 것은 화살표의 의미다. 만약 화살표가 <em>[그림 2-4]</em> 처럼 특정한 물체를 가리키는 용도라면 <code class="language-plaintext highlighter-rouge">방법#1</code>처럼 화살표를 회전시켜서 구현하는 것이 맞다.</p>

<p><img src="/assets/images/arrows3.svg" alt="방향키3" /> <br />
<em>[그림 2-4] 무언가를 가리키는 용도의 화살표</em></p>

<p>그러나 사용자가 생각한 방향키는 <em>[그림 2-5]</em> 와 같이 키보드 구석에 고정되어 있는 4개의 방향키였을 것이다. 그리고 그런 사용자의 생각과 유사한 것은 <code class="language-plaintext highlighter-rouge">방법#2</code>와 같이 4개의 이미지를 사용하는 것이다.</p>

<p><img src="/assets/images/arrows4.svg" alt="방향키4" /> <br />
<em>[그림 2-5] 서로 다른 모양의 화살표를 가지는 방향키</em></p>

<p>사용자에게 보여지는 결과물은 같기 때문에 어떤 방법을 선택해도 큰 차이는 없다고 생각할지도 모르겠다. 사용자의 생각을 무시한 채 단순히 구현 편의성만을 추구하면 어떻게 될까?</p>

<p>사용자는 언제든지 화살표의 모양을 쉽게 변경할 수 있다고 생각한다. 왜냐하면 사용자는 당연히 4개의 이미지로 구성된 방향키라고 생각하기 때문이다. 이미지를 회전시켜서 성능을 최적화 하는 것은 지극히 개발자의 입장일 뿐이다. 그리고 어느날 사용자는 방향키의 모양을 <em>[그림 2-4]</em> 처럼 변경해 달라고 가볍게 요구할 수 있다. 키의 이미지를 변경하기만 하면 되니까 쉬운 작업이라고 생각할 것이다. 그러나 개발자는 구현 방법을 바꿔야 하는 큰 일이 된다.</p>

<p>화살표의 모양이 동일한 것은 그저 우연일 뿐이다. 이런 우연으로 생긴 상황을 코드에 반영해서 구현하면 사용자의 생각이나 기대와 점점 멀어지게 된다. 다시 얘기하자면 사용자의 의도를 무시한 채 구현 편의성만을 추구하면 유지보수가 점점 더 어려워 지게 된다.</p>

<h3 id="24-해석의-어려움">2.4. 해석의 어려움</h3>

<p>요구사항의 본질을 통찰하는 과정에서
여러 방법을 두고 고민하게 되는 이유 중에 하나는 당연한 정보는 누락하기 때문이다.</p>

<p>사용자가 방향키를 요구사항으로 언급했을 때는 키보드의 그 방향키라고 구체적으로 설명하지는 않았을 것이다. 사용자의 입장에서는 방향키라고 하면 당연히 키보드의 그것이라고 생각하기 때문이다.</p>

<p>그러나 개발자 입장에서는 방향키에 대한 추가 정보가 없기 때문에 구현 방법을 선택하는 데 있어서 조금 더 고민하게 되는 것이다.</p>

<p>이것이 해석의 어려운 부분인데 당연하다고 여겨 구체적 정의를 생략한 부분은, 개발 단계에서 개발자가 스스로 채워넣어야 한다. 그리고 개발자가 누락된 부분을 채우려면 요구사항이 그렇게 정의된 이유와 과정까지 모두 고려해야 하기 때문에 많은 경험과 통찰력이 필요하다.</p>

<p>만약 지금 상황에서 사용자의 의도를 정확히 파악할 수 없다면 어떻게 해야 할까? 혹은 어떻게 변경될지 예측할 수 없다면 어떻게 해야 할까?</p>

<p>아래처럼 <code class="language-plaintext highlighter-rouge">Up, Down, Left, Right</code> 클래스로 정의해서 화살표의 요구사항이 어떻게 변경 되더라도 다른 곳에 영향이 없도록 하면 된다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span><span class="o">&gt;</span>
    <span class="kd">const</span> <span class="nx">Up</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="kd">const</span> <span class="nx">Down</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">180</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="kd">const</span> <span class="nx">Left</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">-90</span><span class="dl">"</span> <span class="o">/&gt;</span>
    <span class="kd">const</span> <span class="nx">Right</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">arrow.png</span><span class="dl">"</span> <span class="nx">rotate</span><span class="o">=</span><span class="dl">"</span><span class="s2">90</span><span class="dl">"</span> <span class="o">/&gt;</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;Up</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Down</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Left</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;Right</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<h2 id="3-rest-api의-shallow-routing-vs-nested-routing">3. REST API의 Shallow Routing vs Nested Routing</h2>

<p>[그림 3-1]은 사용자가 영화 예매 서비스에서 상영 중인 영화/극장/시간을 선택하는 시퀀스 다이어그램이다. 여기에서 REST API의 라우팅을 어떻게 디자인 해야 할까?</p>

<p><object data="/uml/9eca4c0ba637d46c74f35ee2c77ca2cf.svg" type="image/svg+xml" class="plantuml"></object></p>

<p><em>[그림 3-1]</em></p>

<h3 id="31-shallow-routing">3.1. Shallow Routing</h3>

<p><code class="language-plaintext highlighter-rouge">Shallow Routing</code> 형식으로 디자인 한다면 아래와 비슷한 형태가 될 것이다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 상영 영화 목록 요청</span>
/movies?status<span class="o">=</span>showing

<span class="c"># 상영 극장 목록 요청</span>
/theaters?movieId<span class="o">={</span>movidId<span class="o">}</span>

<span class="c"># 상영일 목록 요청</span>
/showdates?movieId<span class="o">={</span>movieId<span class="o">}</span>&amp;theaterId<span class="o">={</span>theaterId<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Shallow Routing</code>은 각 리소스를 독립적으로 관리할 수 있으므로 확장성이 좋다. 그러나 리소스 간의 관계를 명확하게 표현하지 않기 때문에 복잡한 계층 구조의 데이터를 표현하는데 어려움이 있다.</p>

<h3 id="32-nested-routing">3.2. Nested Routing</h3>

<p><code class="language-plaintext highlighter-rouge">Nested Routing</code> 형식으로 디자인 한다면 아래와 비슷한 형태가 될 것이다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 상영 영화 목록 요청</span>
/showing/movies

<span class="c"># 상영 극장 목록 요청</span>
/showing/movies/<span class="o">{</span>movieId<span class="o">}</span>/theaters

<span class="c"># 상영일 목록 요청</span>
/showing/movies/<span class="o">{</span>movieId<span class="o">}</span>/theaters/<span class="o">{</span>theaterId<span class="o">}</span>/showdates
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Nested Routing</code>은 리소스 간의 관계를 URL에서 명확하게 표현할 수 있으므로, 복잡한 리소스 구조를 표현하는데 적합하다. 그러나 중첩된 리소스 구조가 변경될 경우, URL도 함께 변경되어야 하므로 유연성이 제한된다.</p>

<h3 id="33-옳은-방법은-무엇일까">3.3. 옳은 방법은 무엇일까?</h3>

<p>두 REST API의 라우팅 디자인 방식의 장단점을 간단하게 살펴봤다. 그렇다면 <code class="language-plaintext highlighter-rouge">Shallow Routing</code>의 유연성과 <code class="language-plaintext highlighter-rouge">Nested Routing</code>의 명확함 사이에서 어떤 방법을 선택해야 할까?</p>

<p>두 방식 중에서 무엇을 선택할 것인지는 개념적인 관점에서 영화 예매 프로세스를 더 잘 표현하는 것이 무엇인지를 봐야 한다.</p>

<p>그런 면에서 <code class="language-plaintext highlighter-rouge">Nested Routing</code>은 티켓 구매 프로세스를 그대로 반영하고 있다.
티켓 구매 프로세스가 영화 선택 후 극장을 선택해야 하듯이, <code class="language-plaintext highlighter-rouge">Nested Routing</code>도 영화를 지정하지 않으면 극장을 지정할 수 없다.
즉, <code class="language-plaintext highlighter-rouge">Nested Routing</code>의 REST API가 티켓 구매 프로세스와 유사한 구조를 표현하고 있다.
이 정도면 별도의 문서가 없어도 티켓 구매 프로세스를 알 수 있을 것이다.</p>

<p><code class="language-plaintext highlighter-rouge">Shallow Routing</code>과 <code class="language-plaintext highlighter-rouge">Nested Routing</code> 중에서 무엇이 좋은가에 대한 논쟁을 종종 보게된다.
그러나 그런 논쟁은 무의미하다. 중요한 것은 요구사항을 보다 정확히 반영하는 것이 무엇이냐인 것이다.
기술적 관점에서 보면 답이 없는 문제를 가지고 논쟁을 하니 논쟁이 끝나지 않는 것이다.</p>

<blockquote>
  <p>한참 고민해도 답이 보이지 않는다면, 답이 거기에 없는 것이다.</p>
</blockquote>

<h3 id="34-클래스의-상속inheritance과-합성composition">3.4. 클래스의 상속(Inheritance)과 합성(Composition)</h3>

<p><code class="language-plaintext highlighter-rouge">Shallow Routing</code>과 <code class="language-plaintext highlighter-rouge">Nested Routing</code>의 논쟁과 유사한 다른 논쟁으로 클래스의 상속(Inheritance)과 합성(Composition)이 있다.</p>

<p>유연성이 주는 장점 때문에 <code class="language-plaintext highlighter-rouge">Shallow Routing</code>이 기술적으로 우월하다는 대체적인 공감대와 마찬가지로 클래스도 가능하면 상속을 피하고 합성을 사용하는 것이 좋은 재사용 방법이라고 한다. 그러나 이것도 마찬가지로 도메인 개념을 더 잘 표현하는 것이 무엇인지를 고민해야 하는 것이지 기술적 우월성을 우선해서 고려하면 안 된다.</p>

<p><object data="/uml/9f603402d37bffc94cd71f3d9fe52b9d.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>위의 다이어그램에서 Dog는 Animal의 한 종류다. 이것은 상속으로 표현하는 것이 자연스럽다. 반면에 Engine은 Car를 구성하는 부품 중 하나이다. 이것은 포함으로 표현하는 것이 자연스럽다.</p>

<h2 id="4-유사한-형식의-문서-구현-방법">4. 유사한 형식의 문서 구현 방법</h2>

<p>소득증명서와 같은 국내에서 발행되는 문서의 국외 사용을 위한 인증 방식이 두 가지 있는데 ‘아포스티유’와 ‘영사확인’이다.
영사확인이 일반적인 절차이고 아포스티유는 협약에 따라 영사확인 절차를 보다 보다 간소화 한 것이다.</p>

<p>프로젝트의 목표는 이 두 문서를 암호화 하고 변조 여부를 확인할 수 있는 시스템을 구축하는 것이었다.</p>

<p>아포스티유와 영사확인 문서는 항목이나 구조가 유사했기 때문에 기존에 구축된 서비스도 하나의 테이블을 공유하고 있었다.</p>

<p><object data="/uml/05725b13c788685ea2729a3ba231029d.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="41-초기-설계">4.1. 초기 설계</h3>

<p>기존 시스템을 분석하는 과정에서 나는 영사확인과 아포스티유가 비슷해 보이는 것은 우연일 뿐이며 동일한 문서로 취급하면 안 될 것처럼 보였다. 만약 같은 문서라면 프로젝트 이름이 ‘아포스티유 &amp; 영사확인’은 아니었을 것이다.</p>

<p>그에 반해서 back-end 담당자는 두 개로 분리할 필요가 없다는 주장을 하고 있었다.
결국 타협점으로 REST API만 두 개로 분리하고 테이블 등은 하나로 구현하기로 했다.</p>

<p><object data="/uml/ec5e5e2347907e077d1b58976807c9cf.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="42-설계-변경">4.2. 설계 변경</h3>

<p>그런데 프로젝트가 진행되면서 두 문서의 차이가 구체화 되기 시작했다.
아포스티유와 영사확인의 문서번호가 중복될 수 있어서 문서번호 체계가 달라졌다.
그리고 서비스 기능이 확장 되면서 두 문서의 인터페이스는 점점 달라졌다.</p>

<p>결국 테이블을 둘로 나누고 내부 구조도 분리하기로 결정했다.
다행스럽게도 외부에 노출되는 API는 두 개로 분리되어 있었기 때문에 내부 구조를 변경하는 것은 비교적 수월했다.
만약 분리하는 것이 부담스러워서 리팩토링을 피하려고 했다면 코드 곳곳에 if-else가 넘쳐나고 지옥으로 가는 문이 열렸을 것이다.</p>

<p><object data="/uml/92b9f1fa32a97ec298a8c11ad6c7b8fc.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="43-이런-일이-발생한-이유">4.3. 이런 일이 발생한 이유</h3>

<p>이 사례에서 두 문서의 형식이 같았던 것은 그저 우연일 뿐이었다. 사용자의 요구에 따라서 얼마든지 달라질 가능성이 있었다. 애초에 다른 문서이기 때문에 다른 이름이 붙은 것이라는 사실을 간과한 것이 문제였다.</p>

<p>프로그래머는 종종 구현 편의성을 우선하는 경향이 있다. 그 습관을 버리기가 쉽지 않을 것이다. 그러나 철저하게 도메인의 개념을 따라야 한다.</p>

<h2 id="5-인코딩된-파일명의-저장">5. 인코딩된 파일명의 저장</h2>

<p><object data="/uml/e2e215b41740c7b53974ef040726f7b6.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>사용자가 웹 브라우저로 <code class="language-plaintext highlighter-rouge">한글.txt</code> 파일을 업로드 하려고 한다.</p>

<p>사용자가 업로드 하는 파일명에 특수문자가 포함되어 있어서 URL encoding을 해서 서버에 전송해야 한다. 마찬가지로 사용자가 파일을 다운로드 받으려면 파일명을 URL encoding 해야 한다.</p>

<p>그렇다면 서버는 DB에 인코딩된 문자열(<code class="language-plaintext highlighter-rouge">%ED%95%9C%EA%B8%80.txt</code>)을 그대로 저장하는 것이 좋을까? 아니면 이것을 다시 디코딩해서 <code class="language-plaintext highlighter-rouge">한글.txt</code>로 저장하는 것이 좋을까?</p>

<p><code class="language-plaintext highlighter-rouge">한글.txt</code>로 저장하면 사용자에게 파일을 전송할 때 다시 인코딩 해야 한다. 그렇다면 그냥 받은 그대로 <code class="language-plaintext highlighter-rouge">%ED%95%9C%EA%B8%80.txt</code>으로 저장하는 것이 효율적이지 않을까?</p>

<p>본질이 무엇인지 알기 위해서 사용자의 생각을 살펴봐야 한다. 사용자가 업로드 한 파일명은 <code class="language-plaintext highlighter-rouge">한글.txt</code>이다. 사용자는 이것이 변환된다고 생각하지 않은다. 그러니까 저장할 때도 사용자의 생각에 맞춰서 <code class="language-plaintext highlighter-rouge">한글.txt</code>으로 저장하는 것이 옳다.</p>

<p>애초에 URL Encoding은 ASCII 문자 집합의 제한 때문에 필요한 것이지, 사용자의 요구사항이 아니다. 특정 기술의 한계 혹은 특성이 다른 영역에 영향을 주는 것은 좋은 구조가 아니다. 그러니까 HTML의 전송 과정에서 발생하는 기술적인 문제는 그 과정에서 해결해야 하는 것이지 그것을 DB까지 가져오면 두 개의 큰 영역이 서로 강하게 결합되는 안티-패턴이 된다. 사용자의 의도를 더 정확하게 반영하는 것이 우선이고 최적화는 그 다음이다.</p>

<p>다운로드 기능만을 고려한다면 받은 그대로 저장하는 것이 최선의 선택일 것이다. 그러나 기능이 확장되면서 파일 목록을 보여주거나 검색을 허용할 때는 원본 문자열(<code class="language-plaintext highlighter-rouge">한글.txt</code>)이 필요할 것이다. 왜냐하면 사용자는 파일명을 <code class="language-plaintext highlighter-rouge">한글.txt</code>으로 생각하기 때문이다. 그런데 저장을 <code class="language-plaintext highlighter-rouge">%ED%95%9C%EA%B8%80.txt</code>으로 한다면 조회나 검색 기능을 구현할 때 어려움을 겪을 것이다.</p>

<p>구현 편의성을 추구하면 이렇게 작은 변화에도 쉽게 흔들리게 되는 것이다. 반대로 본질을 파악해서 구현하면 예상하지 못한 변화에도 보다 쉽게 대응할 수 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인코딩 된 파일명을 보여줄 것인가?</span>
<span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">95</span><span class="o">%</span><span class="mi">9</span><span class="nx">C</span><span class="o">%</span><span class="nx">EA</span><span class="o">%</span><span class="nx">B8</span><span class="o">%</span><span class="mi">80</span><span class="p">.</span><span class="nx">txt</span>
<span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">85</span><span class="o">%</span><span class="mi">8</span><span class="nx">C</span><span class="o">%</span><span class="nx">EC</span><span class="o">%</span><span class="mi">8</span><span class="nx">A</span><span class="o">%</span><span class="nx">A4</span><span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">8</span><span class="nx">A</span><span class="o">%</span><span class="nx">B8</span><span class="p">.</span><span class="nx">jpg</span>
<span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="mi">0</span><span class="nx">A</span><span class="o">%</span><span class="nx">ED</span><span class="o">%</span><span class="mi">8</span><span class="nx">C</span><span class="o">%</span><span class="mi">8</span><span class="nx">C</span><span class="o">%</span><span class="nx">EC</span><span class="o">%</span><span class="mi">9</span><span class="nx">D</span><span class="o">%</span><span class="nx">BC</span><span class="p">.</span><span class="nx">json</span>

<span class="c1">// 원본 파일명을 보여줄 것인가?</span>
<span class="nx">한글</span><span class="p">.</span><span class="nx">txt</span>
<span class="nx">테스트</span><span class="p">.</span><span class="nx">jpg</span>
<span class="nx">파일</span><span class="p">.</span><span class="nx">json</span>
</code></pre></div></div>

<h2 id="6-결론">6. 결론</h2>

<p>지금까지 살펴본 사례들이 보여준 공통점은 ‘무엇(what)’이 아니라 ‘왜(why)’에 집중한다는 것이다. ‘무엇(what)’은 ‘왜(why)’에 도달하기 위한 방법 중에 하나일 뿐이다. 목적(why)은 쉽게 바뀌지 않지만 방법(what)은 여러 상황에 따라서 얼마든지 바뀔 수 있다.</p>

<p>‘왜(why)’에 집중해야 하는 다른 중요한 이유는 분석 단계에서 사용자의 모든 생각을 문서로 정리할 수 없기 때문이다. 이것은 설계도 마찬가지인데 설계 단계에서 설계자의 모든 생각을 정리할 수 없다. 모든 요구사항과 설계를 최대한 반영한 것이 코드이기 때문이다. 어느 정도 빈틈이 있을 수 밖에 없고 그 빈틈은 굳이 말하지 않아도 알 것이라고 생각하는 것들이다. 문제는 사용자가 당연하게 생각하는 것들을 개발자는 전혀 다르게 받아들일 수 있다는 것이다.</p>

<p>그런데 ‘왜(why)’에 집중해서 사고하면 결국 같은 곳을 바라보기 때문에 의사소통에 다소의 빈틈이 있더라도 그 오차가 크지 않다. 이렇게 사용자와 개발자 간에 발생할 수 있는 생각의 차이를 줄이는 것이 <code class="language-plaintext highlighter-rouge">본질 기반 해석(EBI)</code>의 중요한 역할 중 하나이다.</p>

<p><code class="language-plaintext highlighter-rouge">본질 기반 해석(Essence-Based Interpretation, EBI)</code>은 너무 당연하고 원론적인 개념이라서 대상 범위나 구체적인 실천 방법을 정의하기가 어렵다. 그리고 개발에만 국한되는 것도 아니다.</p>

<p><code class="language-plaintext highlighter-rouge">본질 기반 해석(EBI)</code>은 도메인에 기반해야 한다는 점에서 <code class="language-plaintext highlighter-rouge">도메인 주도 설계(DDD)</code>과 비슷한 맥락을 가진다. 그러나 DDD는 보다 체계적이고 구체적인 설계 방법론으로 복잡하거나 변화가 잦은 도메인에 대응하는 것이 주 목적이다. 반면에 본질 기반 해석(EBI)은 구체적인 방법론이라기보다는, 소프트웨어 개발을 포함한 다양한 분야에 적용할 수 있는 일반적인 사고방식이라 할 수 있다. 정리하면 <code class="language-plaintext highlighter-rouge">도메인 주도 설계(DDD)</code>이 요구사항이 무엇인지를 파악하는 것에 주목하는 것이라면 <code class="language-plaintext highlighter-rouge">본질 기반 해석(EBI)</code>은 요구사항을 정의한 이유가 무엇인지를 통찰하려는 노력이다.</p>

<p><code class="language-plaintext highlighter-rouge">본질 기반 해석(EBI)</code>은 알고보면 당연한 이야기처럼 들린다. 그래서 굳이 <code class="language-plaintext highlighter-rouge">본질 기반 해석(EBI)</code>이라는 거창한 이름으로 정의하려니 좀 창피하기도 하다. 그러나 나를 포함한 많은 개발자들이 이 개념의 존재를 보다 분명하게 인지하는데 도움이 되기를 바라는 마음으로 <code class="language-plaintext highlighter-rouge">본질 기반 해석(EBI)</code>을 정의하고자 한다.</p>

<p>좋은 코드에 대한 고민은 사고방식의 변화를 가져오며, 이는 본질을 통찰하여 예측 불가능한 변화에 대응하는 전략으로 이어진다. 이는 소프트웨어 개발 특유의 소중한 도전이다.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[1. 소개]]></summary></entry><entry><title type="html">Understanding Object-Oriented Programming</title><link href="/2024/03/09/oop-en.html" rel="alternate" type="text/html" title="Understanding Object-Oriented Programming" /><published>2024-03-09T00:00:00+00:00</published><updated>2024-03-09T00:00:00+00:00</updated><id>/2024/03/09/oop-en</id><content type="html" xml:base="/2024/03/09/oop-en.html"><![CDATA[<blockquote>
  <p>Object-oriented programming is a programming paradigm that groups data and functions into a single <code class="language-plaintext highlighter-rouge">object</code>, thereby increasing cohesion and reducing coupling.</p>
</blockquote>

<p>When learning OOP, the most important thing is a shift in thinking. Martin Fowler says that the best way to achieve this shift in thinking is to work in a well-structured OOP environment for a while. However, there aren’t many developers who truly understand OOP, making it difficult to find such an environment.</p>

<p>In this post, we will progressively improve code from a procedural style to an object-oriented style to explore the essence of OOP. Hopefully, this will help you make that crucial mental shift.</p>

<h2 id="1-introduction-to-procedural-code">1. Introduction to Procedural Code</h2>

<p>Let’s start by writing a function that reads a document from a buffer and prints it character by character:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Reading from the buffer */</span>
<span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>

  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="11-adding-functionality-to-procedural-code">1.1. Adding functionality to procedural code</h3>

<p>Now, let’s add a feature to read a document from a file and print it character by character.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="cm">/* Reading from the buffer */</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>

  <span class="cm">/* Reading from a file */</span>
  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
  <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* Reading from the buffer */</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Reading from a file */</span>
    <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

    <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

      <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is a typical example of procedural code. One characteristic of procedural code is the frequent use of if statements.</p>

<h2 id="2-problems-with-procedural-code">2. Problems with Procedural Code</h2>

<p>What if we need to add a feature to read from a REST API? We would have to modify both the main() function and the printDocument() function.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="cm">/* Reading from the buffer */</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>

  <span class="cm">/* Reading from a file */</span>
  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
  <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>

  <span class="cm">/* Making a REST API request */</span>
  <span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpRequest</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://test.com/api</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span> <span class="o">|</span> <span class="nx">HttpRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* Reading from the buffer */</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Reading from a file */</span>
    <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

    <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

      <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* REST API request */</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">body</span><span class="p">();</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">body</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If all we have to change is the single printDocument() function, that might not be a big deal. But what if there are other functions that also need to handle these inputs? The number of functions to update grows accordingly.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span>
    <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>
    <span class="nf">updateDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="dl">"</span><span class="s2">new contents</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">clearDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>

    <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
    <span class="nf">updateDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="dl">"</span><span class="s2">new contents</span><span class="dl">"</span><span class="p">)</span>
    <span class="c1">// There's a rule that you have to close the file before clearing it.</span>
    <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="nf">clearDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">updateDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">,</span> <span class="nx">contents</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">doc</span> <span class="o">=</span> <span class="nx">contents</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">){</span>
        <span class="nx">doc</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">){</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">clearDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">doc</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">){</span>
        <span class="nx">doc</span><span class="p">.</span><span class="k">delete</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">){</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>

            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">()</span>

        <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">)</span>

            <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">){</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In each function, we’re checking the type via if-else. Imagine if you need to change HttpRequest to HttpRequest2. In a real project, the code would be far longer and more complex. Finding and updating all affected functions wouldn’t be easy.</p>

<p>Even from a simple viewpoint, if you have no if statements, you can just read the code as is, but if there’s an if, you have to keep each condition in your head while reading. In other words, if statements increase complexity and make development harder.</p>

<blockquote>
  <p>This is a part that can be hard to convey if someone hasn’t personally struggled with code full of if-else. But we can’t just paste extremely complex code here, either.</p>
</blockquote>

<h2 id="3-how-to-improve-procedural-code">3. How to Improve Procedural Code</h2>

<h3 id="31-splitting-functions">3.1. Splitting functions</h3>

<p>One way to avoid if statements is to split printDocument() into multiple functions:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="nf">printBufferDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printFileDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printBufferDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printFileDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

    <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>At first glance, this seems fine.</p>

<p>However, it’s common for functions to call other functions in a nested way:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span>
    <span class="nf">printBufferWeeklyReport</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>

    <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">printFileWeeklyReport</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printBufferWeeklyReport</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
    <span class="cm">/* Code to generate the report */</span>
    <span class="p">...</span>

    <span class="nf">printBufferDocument</span><span class="p">(</span><span class="nx">report</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printFileWeeklyReport</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="nx">File</span><span class="p">){</span>
    <span class="cm">/* Code to generate the report */</span>
    <span class="p">...</span>

    <span class="nf">printFileDocument</span><span class="p">(</span><span class="nx">report</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Sure, the if statements are gone. But in removing the if, you repeat the <code class="language-plaintext highlighter-rouge">code to generate the report</code> in each place. In such a scenario, sticking with an if might actually be simpler.</p>

<p>Perhaps you’re thinking you could make that <code class="language-plaintext highlighter-rouge">code to generate the report</code> into a function, so that both duplication and if statements vanish. In most real-world projects, though, <code class="language-plaintext highlighter-rouge">code to generate the report</code> differs slightly depending on whether you’re dealing with a buffer or a file. It’s rarely that simple to isolate the logic.</p>

<h3 id="32-passing-in-the-execution-code">3.2. Passing in the execution code</h3>

<p>The fundamental reason we can’t remove the if statements in printDocument() is that main() only provides the data needed by printDocument(), not the method (function) for using that data.</p>

<p>So, printDocument() has to figure out, via conditional checks, how to run the correct logic for the given type of data.</p>

<p>What if we pass in the function itself as well?</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">getCharFromBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">position</span> <span class="o">==</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">position</span><span class="o">++</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">getCharFromBuffer</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">getCharFromFile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="nx">File</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

    <span class="k">return</span> <span class="nx">char</span> <span class="o">==</span> <span class="nx">EOF</span> <span class="p">?</span> <span class="kc">null</span> <span class="p">:</span> <span class="nx">char</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">getCharFromFile</span><span class="p">);</span>
  <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">getChar</span><span class="p">:</span> <span class="nx">Func</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nf">getChar</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

    <span class="nx">char</span> <span class="o">=</span> <span class="nf">getChar</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now main() becomes more complex, but printDocument() no longer needs an if statement and won’t need modifying if new formats appear.</p>

<p>The next question is how to tidy up main().</p>

<h2 id="4-object-oriented-code">4. Object-Oriented Code</h2>

<p>To make main() cleaner, we can use classes:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">bufferDocument</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferDocument</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">bufferDocument</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">fileDocument</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDocument</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">fileDocument</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">reader</span><span class="p">:</span> <span class="nx">DocumentReadable</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="nx">char</span> <span class="o">=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">reader</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">DocumentReadable</span> <span class="p">{</span>
  <span class="nf">getChar</span><span class="p">():</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nf">close</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">BufferDocument</span> <span class="k">implements</span> <span class="nx">DocumentReadable</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">position</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">buffer</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getChar</span><span class="p">():</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">++</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">FileDocument</span> <span class="k">implements</span> <span class="nx">DocumentReadable</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">stream</span><span class="p">:</span> <span class="nx">ReadStream</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span><span class="nx">filename</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getChar</span><span class="p">():</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">stream</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">char</span> <span class="o">!==</span> <span class="nx">EOF</span> <span class="p">?</span> <span class="nx">char</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">close</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the OOP version, printDocument() has no if statements to check document types. When you create the object in main(), you define everything it needs. All printDocument() has to do is call the object’s methods.</p>

<blockquote>
  <p>If you see an if in your code, ask yourself if it’s procedural code. Consider whether you can refactor it to an object-oriented style.</p>
</blockquote>

<p>Earlier, we said the procedural code only passes the data needed by printDocument(), but not the function. The object-oriented approach packages the data and the relevant functions together into an object. That’s the biggest and most striking difference.</p>

<h2 id="5-characteristics-of-a-good-object">5. Characteristics of a Good Object</h2>

<p>Let’s express the code above in a class diagram:</p>

<p><object data="/uml/152ad9a5674298d75d5a14fc5eceea85.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="51-separation-of-concerns">5.1. Separation of Concerns</h3>

<p>The <code class="language-plaintext highlighter-rouge">printDocument()</code> function just uses the <code class="language-plaintext highlighter-rouge">DocumentReadable</code> interface.
<code class="language-plaintext highlighter-rouge">BufferDocument</code> and <code class="language-plaintext highlighter-rouge">FileDocument</code> each provide their functionality according to the <code class="language-plaintext highlighter-rouge">DocumentReadable</code> interface.</p>

<p>So, <code class="language-plaintext highlighter-rouge">printDocument()</code>, <code class="language-plaintext highlighter-rouge">BufferDocument</code>, and <code class="language-plaintext highlighter-rouge">FileDocument</code> only need to know about the <code class="language-plaintext highlighter-rouge">DocumentReadable</code> interface. They know nothing about each other specifically. This means that as long as the <code class="language-plaintext highlighter-rouge">DocumentReadable</code> interface doesn’t change, there’s no need to modify these functions or classes.</p>

<blockquote>
  <p>In other words, if the interface remains stable, any changes within a particular component don’t ripple out to everything else. That’s how OOP enables incremental development. By cleanly separating interface and implementation, OOP naturally fosters high cohesion and low coupling.</p>

  <p>Developers accustomed to procedural thinking can often struggle with the concept of encapsulating a feature so they can focus solely on it. This lack of practice may also appear in everyday tasks like dividing and delegating work.</p>

  <p>For example, a frontend and backend developer define a REST API and then start building their respective parts. An error arises in the backend that indicates the backend code doesn’t meet the existing API specification. Upon debugging, the backend developer discovers it’s simpler to change the REST API (and therefore the frontend code) than to fix the backend code. The backend developer requests the frontend developer to adapt their code. The frontend developer agrees.</p>

  <p>This violates the principle established when the REST API was designed. Moreover, dragging the frontend into the backend’s internal issues creates a tighter coupling.</p>

  <p>You might wonder if such a minor change is really a big deal. It may not seem like a huge issue when coding, but it becomes a headache when someone else tries to analyze the code later.</p>

  <p><code class="language-plaintext highlighter-rouge">Each party’s area of responsibility must remain strictly defined.</code></p>

  <p>Developers accustomed to procedural thinking may perceive this statement as selfish or cold. In reality, it’s purely a technical approach.</p>
</blockquote>

<h3 id="52-access-control">5.2. Access Control</h3>

<p>You can think of functions as being interconnected through variables.</p>

<p>Take global variables, for example. We’re often told not to use them because any function that uses the same global variable becomes interconnected. In a project with over 100,000 lines of code, how can you guarantee every function obeys the rules you have in mind? This skyrockets complexity.</p>

<blockquote>
  <p>If you can’t figure out how far the impact of your code changes might reach, you’re almost guaranteed to create bugs.</p>
</blockquote>

<p>In the following diagram, the get(), print(), change(), reset() functions all share the count variable, so they’re tightly connected. In particular, change() and reset() can directly affect the behavior of every other function that depends on count.</p>

<p><object data="/uml/999f2a2f866e78954d84223335572842.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>By contrast, only the methods inside <code class="language-plaintext highlighter-rouge">BufferDocument</code> can use the <code class="language-plaintext highlighter-rouge">buffer</code> and <code class="language-plaintext highlighter-rouge">position</code> properties. They’re private, so external code is blocked from accessing them.</p>

<p>That’s why you shouldn’t expose properties as public. If external code can modify them, you can’t know how far the impact of a change to those properties might go. It becomes effectively the same as using global variables.</p>

<h2 id="6-applications-of-object-oriented-programming">6. Applications of Object-Oriented Programming</h2>

<p>The principle of separating concerns in OOP to manage complexity and minimize the impact of changes extends into other domains as well.</p>

<h3 id="61-microservices-architecture">6.1. Microservices Architecture</h3>

<p>MSA (Microservices Architecture) bears significant structural resemblance to OOP.</p>

<p>At the core of OOP is bundling data and functions in a single object. Likewise, MSA bundles the database and API into a single service, whose internal implementation and database aren’t exposed externally. This prevents internal changes from affecting the outside world and greatly improves maintainability and scalability.</p>

<p><object data="/uml/5343b720ca16b12ee6bef537a977a2af.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>Not understanding OOP thoroughly can make it significantly harder to grasp and properly design an architecture like MSA, which shares these structural parallels.</p>

<p>These days, MSA is quite popular. Many developers seem to focus primarily on how to use MSA components like API gateways, gRPC, or message brokers. But the most fundamental prerequisite is a deep understanding of OOP.</p>

<h3 id="62-agile-methodology">6.2. Agile Methodology</h3>

<p>In Agile, designers, developers, and planners work as a close-knit team—a collaboration style that can be likened to OOP’s core principle of high cohesion and low coupling. This approach is crucial for productivity and efficiency not only in software development, but also in organizational structure and teamwork.</p>

<p>Although an Agile team isn’t structurally identical to an OOP “object,” there is a similarity in how the person who produces the data (the planner, creating requirements) and the person who consumes it (the developer, implementing those requirements) are part of the same unit. This somewhat mirrors how, inside an object, data (properties) and functions (methods) are tightly coupled.</p>

<p>Additionally, the iterative development process—one of Agile’s core principles—becomes more feasible with OOP’s separation of concerns. OOP models a system as independent objects interacting with each other, which lets you develop and test each object independently. This dovetails neatly with Agile’s emphasis on small development cycles and rapid feedback. Consequently, OOP is recognized as a major underlying technique for successful Agile software development.</p>

<h2 id="7-conclusion">7. Conclusion</h2>

<p>We began with the following statement:</p>

<blockquote>
  <p>Object-oriented programming is a programming paradigm that groups data and functions into a single <code class="language-plaintext highlighter-rouge">object</code>, thereby increasing cohesion and reducing coupling.</p>
</blockquote>

<p>Indeed, the essence of OOP is grouping data and functions into one object. However, many articles and videos explaining OOP focus on encapsulation, information hiding, polymorphism, and inheritance. Those four basic OOP principles are simply guidelines for how to group data and functions. The most fundamental, indispensable part is grouping data and functions together.</p>

<p>Can there be an object that only has data? Or an object that has only functions? Even if you use class syntax, that doesn’t necessarily make it a true object. An object has meaning only when it includes both state (properties) and behavior (methods).</p>

<p>You might feel you’ve grasped something after reading this post, but it won’t become concrete until you try refactoring your own code into an object-oriented style. Understanding what makes “good code” takes a lot of thought and practice.</p>

<p>Modern development methodologies are grounded in OOP. If you don’t have a deep understanding of OOP, you’ll find it challenging to properly apply TDD, DDD, Agile, MSA, and other modern approaches. That’s one major reason many MSA projects exist but relatively few succeed.</p>

<p>A collection of common patterns used in OOP is known as Design Patterns. We’ll cover that next time.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[Object-oriented programming is a programming paradigm that groups data and functions into a single object, thereby increasing cohesion and reducing coupling.]]></summary></entry><entry><title type="html">객체 지향 프로그래밍의 이해</title><link href="/2024/03/09/oop.html" rel="alternate" type="text/html" title="객체 지향 프로그래밍의 이해" /><published>2024-03-09T00:00:00+00:00</published><updated>2024-03-09T00:00:00+00:00</updated><id>/2024/03/09/oop</id><content type="html" xml:base="/2024/03/09/oop.html"><![CDATA[<blockquote>
  <p>객체 지향 프로그래밍은 데이터와 함수를 하나의 ‘객체’로 그룹화하여 응집성은 높이고 의존성은 낮추는 프로그래밍 패러다임이다.</p>
</blockquote>

<p>OOP를 학습할 때 가장 중요한 것은 사고의 전환이다. 마틴 파울러는 사고의 전환을 이루기 위한 가장 좋은 방법은 OOP가 잘 구성된 환경에서 얼마간 일해보는 것이라고 한다. 그러나 OOP를 제대로 이해한 개발자가 많지 않아서 그런 환경을 찾기가 쉽지 않다.</p>

<p>본 글에서는 절차식에서 객체 지향 방식까지 코드를 개선해 가면서 OOP의 본질이 무엇인지 알아보고 사고의 전환을 이루는데 조금이나마 도움이 되려고 한다.</p>

<h2 id="1-절차식-코드-소개">1. 절차식 코드 소개</h2>

<p>먼저, 버퍼에서 문서를 읽어서 한 글자씩 출력하는 함수를 작성해 보자.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 버퍼에서 읽기 */</span>
<span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>

  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="11-절차식-코드에-기능-추가하기">1.1. 절차식 코드에 기능 추가하기</h3>

<p>여기에 파일에서 문서를 읽어서 한 글자씩 출력하는 기능을 추가해 보자.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="cm">/* 버퍼에서 읽기 */</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>

  <span class="cm">/* 파일에서 읽기 */</span>
  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
  <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* 버퍼에서 읽기 */</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* 파일에서 읽기 */</span>
    <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

    <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

      <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이것이 전형적인 절차식이다. 절차식의 특징 중 하나는 if가 자주 나온다는 것이다.</p>

<h2 id="2-절차식-코드의-문제점">2. 절차식 코드의 문제점</h2>

<p>만약 여기에 REST API로 읽는 기능을 추가해야 한다면 어떻게 될까? main()함수는 물론이고 printDocument() 함수도 변경되어야 한다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="cm">/* 버퍼에서 읽기 */</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>

  <span class="cm">/* 파일에서 읽기 */</span>
  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
  <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>

  <span class="cm">/* REST API 요청 */</span>
  <span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpRequest</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://test.com/api</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span> <span class="o">|</span> <span class="nx">HttpRequest</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* 버퍼에서 읽기 */</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* 파일에서 읽기 */</span>
    <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

    <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

      <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* REST API 요청 */</span>
    <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">body</span><span class="p">();</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">body</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>지금처럼 printDocument() 함수 하나만 변경하는 것이라면 문제가 되지 않는다. 그러나 printDocument() 외에 다른 함수가 있다면? 변경해야 하는 함수가 그 만큼 늘어난다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span>
    <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>
    <span class="nf">updateDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="dl">"</span><span class="s2">new contents</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">clearDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>

    <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
    <span class="nf">updateDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="dl">"</span><span class="s2">new contents</span><span class="dl">"</span><span class="p">)</span>
    <span class="c1">// clear 하려면 close 해야 한다는 규칙을 알아야 한다.</span>
    <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="nf">clearDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">updateDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">,</span> <span class="nx">contents</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">doc</span> <span class="o">=</span> <span class="nx">contents</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">){</span>
        <span class="nx">doc</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">){</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">clearDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">doc</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">){</span>
        <span class="nx">doc</span><span class="p">.</span><span class="k">delete</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">){</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">doc</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>

            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">File</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">()</span>

        <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">)</span>

            <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">doc</span> <span class="k">instanceof</span> <span class="nx">HttpRequest</span><span class="p">){</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>if-else로 함수 마다 타입 체크를 하고 있다. 이 상황에서 HttpRequest를 HttpRequest2로 변경해야 한다면 어떨까?</p>

<p>실제 프로젝트는 이것보다 더 길고 복잡한 코드인 경우가 많다. 이런 환경에서 관련된 모든 함수를 찾아서 변경하는 것은 쉽지 않을 것이다.</p>

<p>직관적으로 생각해도 if가 없다면 개발자는 코드를 읽기만 하면 되지만 if가 들어가면 각각의 조건을 머리에 담아두고 읽게 된다. 즉, if는 코드의 복잡도를 증가시키고 개발을 어렵게 한다.</p>

<blockquote>
  <p>이 부분이 지식을 전달하기 어려운 예다. if-else로 고생한 경험이 없다면 위의 설명을 수긍하기 어렵다. 그렇다고 실제로 복잡한 코드를 모두 여기에 적을 수도 없다.</p>
</blockquote>

<h2 id="3-절차식-코드의-개선-방법">3. 절차식 코드의 개선 방법</h2>

<h3 id="31-함수-세분화하기">3.1. 함수 세분화하기</h3>

<p>if를 피하는 방법으로 printDocument()를 세분화 하는 방법을 생각할 수 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="nf">printBufferDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printFileDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printBufferDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printFileDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="nx">File</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="nx">EOF</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

    <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>언뜻 괜찮은 방법처럼 보인다.</p>

<p>그런데 보통은 아래처럼 중첩해서 함수를 호출하기 마련이다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span>
    <span class="nf">printBufferWeeklyReport</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>

    <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">)</span>
    <span class="nf">printFileWeeklyReport</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printBufferWeeklyReport</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span><span class="p">){</span>
    <span class="cm">/* report를 생성하는 코드*/</span>
    <span class="p">...</span>

    <span class="nf">printBufferDocument</span><span class="p">(</span><span class="nx">report</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printFileWeeklyReport</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="nx">File</span><span class="p">){</span>
    <span class="cm">/* report를 생성하는 코드*/</span>
    <span class="p">...</span>

    <span class="nf">printFileDocument</span><span class="p">(</span><span class="nx">report</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>확실히 if 문이 사라지긴 했다. 그러나 if를 피하기 위해서 ‘report를 생성하는 코드’를 반복하게 된다. 이럴거면 차라리 if를 사용하는 것이 낫다.</p>

<p>혹시 <code class="language-plaintext highlighter-rouge">/* report를 생성하는 코드*/</code>를 함수로 만들면 if도 사라지고 중복 코드도 없앨 수 있다고 생각하는가? 실제 프로젝트에서는 <code class="language-plaintext highlighter-rouge">/* report를 생성하는 코드*/</code>가 Buffer나 File에 따라 조금씩 다른 경우가 많아서 코드를 그렇게 쉽게 떼어낼 수 없을 것이다.</p>

<h3 id="32-실행-코드-전달하기">3.2. 실행 코드 전달하기</h3>

<p>printDocument()에서 if를 제거할 수 없는 근본 원인은 main() 함수에서 printDocument()에 필요한 데이터만 전달할 뿐, 그 데이터를 사용하는 방법은 전달하지 않기 때문이다.</p>

<p>그래서 printDocument()는 데이터의 유형에 따라서 실행해야 하는 코드를 판별해야 하는 것이다.</p>

<p>그렇다면 실행해야 하는 코드도 같이 전달하면 어떨까?</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">getCharFromBuffer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">position</span> <span class="o">==</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">position</span><span class="o">++</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="nx">getCharFromBuffer</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">getCharFromFile</span> <span class="o">=</span> <span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="nx">File</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

    <span class="k">return</span> <span class="nx">char</span> <span class="o">==</span> <span class="nx">EOF</span> <span class="p">?</span> <span class="kc">null</span> <span class="p">:</span> <span class="nx">char</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">getCharFromFile</span><span class="p">);</span>
  <span class="nx">file</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">doc</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">getChar</span><span class="p">:</span> <span class="nx">Func</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nf">getChar</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>

    <span class="nx">char</span> <span class="o">=</span> <span class="nf">getChar</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>비록 main() 함수는 더 복잡해졌지만 printDocument()는 if 문이 필요없고 어떤 형식이 오더라도 변경하지 않아도 된다.</p>

<p>이제 어떻게 하면 main() 함수를 깔끔하게 정리할 수 있을까?</p>

<h2 id="4-객체-지향-코드">4. 객체 지향 코드</h2>

<p>main() 함수를 깔끔하게 정리하기 위해서 우리는 클래스를 사용할 수 있다.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">bufferDocument</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferDocument</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello, World!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">bufferDocument</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">fileDocument</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileDocument</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">printDocument</span><span class="p">(</span><span class="nx">fileDocument</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">printDocument</span><span class="p">(</span><span class="nx">reader</span><span class="p">:</span> <span class="nx">DocumentReadable</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">char</span> <span class="o">=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">char</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">char</span><span class="p">);</span>
    <span class="nx">char</span> <span class="o">=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">reader</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">DocumentReadable</span> <span class="p">{</span>
  <span class="nf">getChar</span><span class="p">():</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nf">close</span><span class="p">():</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">BufferDocument</span> <span class="k">implements</span> <span class="nx">DocumentReadable</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">position</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">buffer</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getChar</span><span class="p">():</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>

    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">++</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">FileDocument</span> <span class="k">implements</span> <span class="nx">DocumentReadable</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">stream</span><span class="p">:</span> <span class="nx">ReadStream</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span><span class="nx">filename</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">getChar</span><span class="p">():</span> <span class="kr">string</span> <span class="o">|</span> <span class="kc">null</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">stream</span><span class="p">.</span><span class="nf">getChar</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">char</span> <span class="o">!==</span> <span class="nx">EOF</span> <span class="p">?</span> <span class="nx">char</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nf">close</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위의 객체 지향 방식에서의 printDocument()에는 문서 타입을 판별하는 if 문이 없다. main()에서 객체를 처음 생성할 때 필요한 것들이 모두 정해진다. printDocument()는 주어진 객체를 사용하기만 하면 되는 것이다.</p>

<blockquote>
  <p>코드에 if 문이 보인다면 이것이 절차식은 아닌지? 객체 지향으로 개선할 수 없는지 고민해 보기를 바란다.</p>
</blockquote>

<p>앞서 절차식은 printDocument()에 필요한 데이터만 전달할 뿐, 그 데이터를 사용하는 구체적인 방법(함수)은 전달하지 않는다고 했다. 객체 지향 방식은 데이터와 그 데이터를 사용하는 함수를 객체로 묶어서 전달한다. 이것이 가장 크고 두드러지는 차이점이다.</p>

<h2 id="5-좋은-객체의-특징">5. 좋은 객체의 특징</h2>

<p>코드를 클래스 다이어그램으로 표현해 보자.</p>

<p><object data="/uml/152ad9a5674298d75d5a14fc5eceea85.svg" type="image/svg+xml" class="plantuml"></object></p>

<h3 id="51-관심사-분리">5.1. 관심사 분리</h3>

<p><code class="language-plaintext highlighter-rouge">printDocument()</code> 함수는 <code class="language-plaintext highlighter-rouge">DocumentReadable</code> 인터페이스를 사용하기만 한다.<br />
<code class="language-plaintext highlighter-rouge">BufferDocument</code>나 <code class="language-plaintext highlighter-rouge">FileDocument</code>는 <code class="language-plaintext highlighter-rouge">DocumentReadable</code> 인터페이스에 맞춰서 각자 기능을 제공하기만 한다.</p>

<p>그러니까 <code class="language-plaintext highlighter-rouge">printDocument()</code>, <code class="language-plaintext highlighter-rouge">BufferDocument</code>, <code class="language-plaintext highlighter-rouge">FileDocument</code>가 아는 것은 <code class="language-plaintext highlighter-rouge">DocumentReadable</code> 인터페이스 뿐이고 서로에 대해서는 알지 못한다. 이것은 즉, <code class="language-plaintext highlighter-rouge">DocumentReadable</code> 인터페이스가 변경되지 않는 한 각 클래스 혹은 함수를 변경할 필요가 없다는 뜻이다.</p>

<p>다시 설명하자면 인터페이스를 변경하지 않는다면 각 부분을 어떻게 변경하든 다른 부분에는 영향을 미치지 않는다는 것이다. 이것이 객체 지향 프로그래밍이 점진적인 개발을 가능하게 하는 방법이다. 이렇게 인터페이스와 구현을 분리하는 매커니즘은 자연스럽게 응집성이 높아지면서 의존성이 낮아지는 결과가 된다.</p>

<blockquote>
  <p>절차식 사고에 익숙하면 이렇게 기능을 응집시키고 그 부분에만 집중하는 방법 자체에 서투른 경우를 보게 된다. 그것은 코드 뿐만이 아니라 업무를 분담하고 협업하는 등의 일상적인 업무에서도 나타난다.</p>

  <p>예를 들면, 프론트엔드와 백엔드 개발자가 REST API를 정의하고 각자 개발을 진행한다. 그러다 기존에 정의한 REST API를 만족시키지 못하는 오류가 백엔드에서 발생한다. 디버깅을 해보니 백엔드에서 코드를 수정하는 것보다 REST API를 변경하고 프론트엔드에서 코드를 수정하는 것이 더 간단한 상황이다. 백엔드 개발자는 프론트엔드 개발자에게 코드를 수정해 달라고 요청하고 프론트엔드 개발자도 기꺼이 동의한다.</p>

  <p>REST API를 설계했을 때의 원칙을 저버리는 것은 큰 문제다. 더군다나 백엔드의 문제를 프론트엔드까지 끌어들이면서 백엔드와 프론트엔드는 그 만큼 더 강하게 결합하게 된다.</p>

  <p>이 정도 사소한 변경이 그렇게 큰 문제일까 싶은 의문이 들지도 모르겠다. 코딩하는 당시에는 대수롭지 않겠지만 시간이 지나고 다른 개발자가 코드를 분석하려고 할 때 장애가 된다.</p>

  <p>“각자의 작업 영역은 엄격하게 지켜야 한다.”</p>

  <p>절차식 사고에 익숙한 개발자는 이 말을 이기적이고 냉정한 것으로 받아들이는 경우가 있다. 그러나 이것은 지극히 기술적인 접근일 뿐이다.</p>
</blockquote>

<h3 id="52-접근-제어">5.2. 접근 제어</h3>

<p>함수들은 변수를 통해서 서로 연결된다고 볼 수 있다.</p>

<p>전역변수를 생각해 보자. 흔히 전역변수를 사용하면 안 된다고 한다. 왜냐하면 하나의 전역변수를 사용하는 모든 함수들은 서로 연결되는 것이다. 소스코드가 10만 라인이 넘어가는 상황에서 다른 함수들이 내가 생각한 규칙대로 움직인다고 어떻게 보장할 수 있을까?
이것은 복잡도를 엄청나게 상승시킨다.</p>

<blockquote>
  <p>코드를 변경할 때 그 영향이 어디까지 미치는 것인지 파악이 안 된다면 거의 반드시 버그를 만들고 있는 것이다.</p>
</blockquote>

<p>아래의 그림에서 count 변수를 사용하는 get(), print(), change(), reset() 함수들은 서로 연결되어 있다. 특히 값을 변경하는 change(), reset() 함수는 다른 모든 함수에 직접적인 영향을 끼친다.</p>

<p><object data="/uml/999f2a2f866e78954d84223335572842.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>반면에 <code class="language-plaintext highlighter-rouge">BufferDocument</code>의 <code class="language-plaintext highlighter-rouge">buffer</code>나 <code class="language-plaintext highlighter-rouge">position</code>을 사용하는 함수는 <code class="language-plaintext highlighter-rouge">BufferDocument</code> 클래스에만 존재할 수 있다.
왜냐하면 두 프로퍼티(변수)가 비공개이기 때문에 외부에서의 접근이 원천적으로 차단되기 때문이다.</p>

<p>이것이 프로퍼티를 public으로 직접 노출하지 말라는 이유이다. 외부에서 프로퍼티를 변경할 수 있다면 프로퍼티와 관련된 코드를 변경할 때 그 영향이 어디까지 미칠지 알 수 없게 된다. 잠재적으로 전역변수와 다를바 없게 되는 것이다.</p>

<h2 id="6-객체-지향의-응용">6. 객체 지향의 응용</h2>

<p>객체 지향 방식의 관심사 분리를 통한 복잡도 관리 및 변화에 의한 영향을 최소화 하는 특징은 다른 분야에도 영향을 끼친다.</p>

<h3 id="61-microservices-architecture">6.1. Microservices Architecture</h3>

<p>MSA는 구조적으로 객체 지향 방식과 유사한 면이 많다.</p>

<p>객체 지향의 핵심은 데이터와 함수를 하나의 객체로 묶는 것이다. MSA에서 서비스도 DB와 API를 하나로 묶어서 관리하고 각 서비스의 내부 구현과 DB는 외부에 노출되지 않는다. 이것은 서비스 내부의 변화가 외부에 영향을 미치지 않도록 하면서 유지보수성과 확장성에 큰 장점이 된다.</p>

<p><object data="/uml/5343b720ca16b12ee6bef537a977a2af.svg" type="image/svg+xml" class="plantuml"></object></p>

<p>OOP와 MSA가 구조적으로 유사하다는 사실에서 알 수 있듯이, OOP를 제대로 이해하지 못하면 MSA와 같은 아키텍처를 이해하고 올바르게 설계하는 것은 많이 어려운 일이 될 것이다.</p>

<p>요즘은 MSA가 유행인 것 같다. 그리고 많은 개발자들이 API gateway나 gRPC, 메시지 브로커 등 MSA 구성 요소들의 사용법을 익히는 데만 열중하는 것 같다. 그러나 가장 중요하고 기본적인 것은 OOP에 대한 깊은 이해이다.</p>

<h3 id="62-애자일-방법론">6.2. 애자일 방법론</h3>

<p>디자이너, 개발자, 기획자 등 관련자들이 한 팀을 이뤄 긴밀하게 협력하는 작업 방식은 객체 지향 프로그래밍(OOP)의 핵심 원칙인 높은 응집성과 낮은 결합도에 비유할 수 있다. 이러한 접근 방식은 소프트웨어 개발 뿐만 아니라, 조직 구성과 팀워크에서도 생산성과 효율성을 높이는 데 중요한 역할을 한다.</p>

<p>애자일 팀의 구성 자체가 데이터와 함수를 하나로 묶는 객체와 동일한 구조는 아니다. 그러나 애자일 팀에서는 기획자가 요구사항이라는 데이터를 생산하고, 개발자가 이를 구현한다는 점에서 데이터의 생산과 소비 주체가 함께 있다는 유사성을 찾을 수 있다. 이는 마치 객체 내부에서 데이터(속성)와 함수(메서드)가 밀접하게 연관되어 있는 것과 같은 맥락으로 볼 수 있다.</p>

<p>한편, 애자일 방법론의 중요 원칙인 점진적인 개발을 반복하는 프로세스는 객체 지향 설계의 관심사 분리를 기반으로 가능한 것이다. 객체 지향 프로그래밍은 시스템을 독립적인 객체들의 상호작용으로 모델링하므로, 각 객체를 개별적으로 개발하고 테스트할 수 있게 해준다. 이는 애자일 방법론이 지향하는 작은 단위의 개발과 피드백 반영을 원활히 하는 데 도움이 된다. 결과적으로 OOP는 애자일 소프트웨어 개발의 기반이 되는 주요 기법 중 하나로 자리매김하고 있다.</p>

<h2 id="7-결론">7. 결론</h2>

<p>이 글은 이렇게 시작했다.</p>

<blockquote>
  <p>객체 지향 프로그래밍은 데이터와 함수를 하나의 ‘객체’로 그룹화하여 응집성은 높이고 의존성은 낮추는 프로그래밍 패러다임이다.</p>
</blockquote>

<p>그렇다. 데이터와 함수를 하나의 객체로 그룹화 한다는 것이 객체 지향의 핵심이다.
그러나 OOP를 설명하는 많은 글이나 영상은 OOP의 캡슐화, 은닉화, 다형성, 상속성이 무엇인지를 설명한다. OOP의 이 네 가지 기본 원칙은 데이터와 함수를 그룹화 할 때의 지침일 뿐이다. 가장 기본적이고 필수적인 것은 데이터와 함수의 그룹화이다.</p>

<p>그렇다면 데이터만 존재하는 객체가 있을 수 있을까? 반대로 함수만 존재하는 객체가 있을 수 있을까?
문법적으로 class를 사용해서 코드를 작성한다고 해도 그것은 객체가 아니다. 객체는 상태(프로퍼티)와 방법(메소드)이 함께해야 의미를 가진다.</p>

<p>지금 이 글을 읽고 뭔가를 알것 같은 느낌을 받았을지도 모른다. 그러나 실제로 자신의 코드를 객체지향으로 바꿔보기 전에는 그것이 구체화 되지는 않을 것이다.
좋은 코드가 무엇인지 많은 고민과 연습이 필요하다.</p>

<p>현대적인 개발 방법론의 근간에는 OOP가 있다. OOP를 깊이있게 이해하지 못하면 TDD, DDD, 애자일, MSA 등 현대적인 개발 방법을 공부해도 올바르게 사용하기 어려울 것이다. 실제로 MSA를 적용한 프로젝트는 많지만 성공 사례가 적은 이유이다.</p>

<p>객체지향 프로그래밍에서 자주 사용하는 일반적인 패턴을 모아놓은 것이 디자인 패턴이다. 이것은 다음 기회에 다루겠다.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[객체 지향 프로그래밍은 데이터와 함수를 하나의 ‘객체’로 그룹화하여 응집성은 높이고 의존성은 낮추는 프로그래밍 패러다임이다.]]></summary></entry><entry><title type="html">The Ideological Wars of Software Development: Why Do Developers Act This Way?</title><link href="/2024/02/03/principled-pragmatic-en.html" rel="alternate" type="text/html" title="The Ideological Wars of Software Development: Why Do Developers Act This Way?" /><published>2024-02-03T00:00:00+00:00</published><updated>2024-02-03T00:00:00+00:00</updated><id>/2024/02/03/principled-pragmatic-en</id><content type="html" xml:base="/2024/02/03/principled-pragmatic-en.html"><![CDATA[<p><img src="/assets/images/principle-pragmatic.webp" alt="" /></p>

<p>In the past, just as communism and capitalism were irreconcilable ideologies during the Cold War, there are two contrasting ideologies in the field of software development: <code class="language-plaintext highlighter-rouge">principle-focused</code> and <code class="language-plaintext highlighter-rouge">pragmatic</code>. Software development is an extremely complex process, and these two ideologies approach problems in fundamentally different ways. Consequently, principle-focused and pragmatic mindsets can significantly affect the success or failure of software projects.</p>

<p><code class="language-plaintext highlighter-rouge">Principle-focused developers</code> believe that development should be grounded in systematic theories of software engineering. They place a strong emphasis on maintainability and argue for meticulous coding from a long-term perspective. <code class="language-plaintext highlighter-rouge">Pragmatic developers</code>, on the other hand, focus on solving problems as simply and quickly as possible. Because software is inherently complex, they believe that no matter how carefully you code, it won’t make much difference. Thus, it’s more efficient to react immediately whenever problems arise rather than investing a lot of time upfront.</p>

<p>Most developers fall somewhere between extreme principle-focused and extreme pragmatic mindsets, but this article focuses on these two extremes. We’ll examine their opposing views and approaches, as well as the conflicts that can arise when they collaborate.</p>

<h2 id="1-a-principle-focused-team-member">1. A Principle-Focused Team Member</h2>

<p><img src="/assets/images/principle-member.webp" alt="" /></p>

<h3 id="11-conflict-with-a-pragmatic-team-lead">1.1. Conflict with a Pragmatic Team Lead</h3>

<p>A junior developer, brimming with a desire to learn and grow, is more likely to be principle-focused. Such a developer would be happy under a principle-focused team lead, but in reality, it’s far more common for a principle-focused team member to end up with a pragmatic team lead.</p>

<p>A principle-focused team member in a pragmatic team lead’s environment can feel challenged. They can’t expect much in the way of thorough code reviews, and because the team lead pushes for deadlines, there’s little opportunity to care deeply about code quality. Even if they manage to do some refactoring during lulls, they have to be mindful of the team lead’s reaction.</p>

<p>When problems occur, the principle-focused developer tries to figure out the root cause and address it in the “right” way. However, a pragmatic lead might propose a quick fix that doesn’t bother digging into the root cause. Repetition of this pattern leaves the principle-focused developer feeling frustrated, believing the team lead lacks competence or a sense of responsibility. Since they can’t admire or learn from such a lead, they may show disrespectful behavior or disregard the team lead’s authority. The lead, in turn, senses this and may respond harshly. The principle-focused team member becomes more and more mentally exhausted and eventually resigns. Yet, even at a new company, they’re likely to encounter another pragmatic manager, so this issue tends to persist for the principle-focused developer.</p>

<h3 id="12-projects-that-hinder-growth">1.2. Projects That Hinder Growth</h3>

<p>Because principle-focused developers have a strong desire to grow, they get anxious if the company’s work doesn’t help them learn. This can include maintaining tech-debt-ridden code or even doing new development with outdated or rarely-used technologies.</p>

<p>In such situations, a pragmatic team lead is prone to maintaining the status quo and will likely avoid large-scale refactoring or adopting cutting-edge technologies. Any suggestions from the principle-focused team member will probably be rejected. Just as the first button on a shirt must be correctly fastened, a junior developer’s initial project experience can heavily influence their development trajectory. If it doesn’t feel right, leaving the team might be better in the long run.</p>

<p>However, if the team lead is principle-focused, then waiting might be a good strategy. If the current project is riddled with technical issues, there may eventually be a chance to rebuild it. At that point, the principle-focused team member’s prior maintenance experience provides them with a strong understanding of the domain and requirements—ideal for focusing on technology. Of course, the principle-focused developer must be fully prepared to handle such a major undertaking when the opportunity arises.</p>

<h3 id="13-a-word-to-principle-focused-team-members">1.3. A Word to Principle-Focused Team Members</h3>

<p>Here’s what I’d say to a principle-focused team member:</p>

<p><strong>A company is not a school.</strong></p>

<p>You sell your time and expertise in exchange for money. You can’t always do just what you want at a company.</p>

<blockquote>
  <p>I once moved around between several companies and encountered a few team leads who did respect my ideas, but on two occasions, I ran into extremely pragmatic leads. These pragmatic leads didn’t seem to like having a young, confident team member brimming with enthusiasm. I still believe I tried to respect them as much as possible. When I was in conflict with the team lead, I often asked my colleagues whether I had done something wrong. They would mostly respond, “It’s just that you two don’t get along.”</p>

  <p>In retrospect, maybe the pragmatic lead felt uneasy because they feared their own skills were lagging. I, as a principle-focused team member, was openly discussing design patterns and refactoring, which might have worsened their insecurities. To the pragmatic team lead, a confident and somewhat oblivious junior could easily appear irritating.</p>
</blockquote>

<h2 id="2-a-principle-focused-team-lead">2. A Principle-Focused Team Lead</h2>

<p><img src="/assets/images/principle-leader.webp" alt="" /></p>

<p>If a principle-focused developer’s passion continues, they often become a principle-focused team lead. While I use the term “team lead,” it essentially refers to anyone who takes initiative on a project and exerts significant influence on development.</p>

<h3 id="21-over-engineering">2.1. Over-Engineering</h3>

<p>Principle-focused leads can be excessively obsessed with “future-proofing.” This tendency manifests as excessive abstraction and unnecessary application of design patterns—classic forms of over-engineering. Ironically, that can make the code more complex and reduce development efficiency. The very principle of “maintainability” ends up harming maintainability, a tragic outcome indeed.</p>

<p>Over-engineering can frustrate managers because they see the lead working hard on complex design tasks without delivering much visible progress, raising concerns about the schedule. Early in the project, there might be enough leeway to wait and see. But once the manager reaches their limit, they’ll intervene more aggressively.</p>

<p>Additionally, a principle-focused lead who’s deeply invested in future-proofing may have a weaker grasp of the big picture. What happens if a major change in requirements arises mid-project, or a significant technical issue surfaces—something they failed to anticipate while spending so much time on design and research?</p>

<p>The principle-focused lead may see this as someone else’s responsibility—outside the development team’s control—and argue that these changes are an “act of God,” making it logical to extend the deadline or scale back features. But from the manager’s perspective, the question remains: “Why did we spend so much time on design if we can’t adapt quickly to changes?” They might conclude that a pragmatic approach is more helpful in delivering immediate results. Feeling misunderstood, the principle-focused lead grows frustrated because their efforts toward high-quality code seem undervalued.</p>

<blockquote>
  <p>Part of this is my own story. Whenever I started a new project, I’d set a technical challenge for myself—applying TDD or DDD, for example. How long and how extensively I pursued these experiments depended on the manager’s feedback. Usually, if more than a month passed without much visible product progress, I’d get warned that development was behind schedule.</p>
</blockquote>

<h3 id="22-over-processing">2.2. Over-Processing</h3>

<p>Over-processing involves excessively formal or inefficient development processes. If over-engineering frustrates managers, over-processing frustrates team members. Examples include:</p>

<ul>
  <li>Requiring overly formal and detailed documentation</li>
  <li>Enforcing overly strict coding rules</li>
  <li>Obsessing over test coverage</li>
</ul>

<p>A principle-focused lead might demand very high test coverage from the team. While testing is indeed critical, chasing coverage metrics blindly can reduce code flexibility, complicate the test suite, and hamper maintenance.</p>

<p>Team members might initially place high hopes in a principle-focused lead’s grand vision for correct development methodologies. But before long, they may become exhausted by the lead’s overly systematic approach and insistence on detailed plans.</p>

<ul>
  <li>If the lead’s management is loose, team members may begin ignoring directives bit by bit.</li>
  <li>If the lead’s management is tight, the lead’s own coding time diminishes, and they end up policing every minor mistake. Team members then feel pressured by constant nitpicking, and the lead feels frustrated by their team’s shortcomings.</li>
</ul>

<p>Sometimes, the demands of a principle-focused lead are so lofty that even the lead themselves finds them hard to meet. Software design is inherently complex and abstract, and it’s tough to fully document your own ideas, let alone expect less-experienced team members to do so without robust guidance. To them, it can be as daunting as writing a book report in grade school.</p>

<blockquote>
  <p>When I joined a new company as a team lead, I learned that the previous lead, who had been very enthusiastic and principle-driven, demanded 100% code coverage from the team. Sure, maintaining 100% coverage is a great goal. The problem was that the team wrote meticulous tests for every function, so even the smallest changes would break tons of tests.</p>

  <p>A function doesn’t typically operate in isolation—it calls other functions and is called by others. Tests must be written at an appropriate granularity for maintainability and productivity, which had apparently been overlooked.</p>

  <p>Ultimately, we slashed the test code by 90%, and after that, the team felt more motivated to write practical tests.</p>
</blockquote>

<h3 id="23-causes-of-the-problem">2.3. Causes of the Problem</h3>

<p>A principle-focused lead is at a stage of maximum trial and error, in part because their authority outweighs their skill and experience. Overconfidence can compound the issue.</p>

<p>There’s often a correlation between enthusiasm and confidence, so a highly motivated principle-focused lead tends to be highly self-assured. That self-assurance may lead them to blame others for problems and to be very forceful about their own methods—a burden for managers and colleagues alike, though the lead themselves often remains oblivious.</p>

<p>A final note to principle-focused leads:</p>

<p><strong>Do not focus on what you want to do, but on what must be done.</strong></p>

<p>Think critically about whether the task at hand is really necessary. Principle-focused leads have a built-in tendency to rationalize what they want to do as if it were strictly required.</p>

<h2 id="3-a-pragmatic-team-member">3. A Pragmatic Team Member</h2>

<p><img src="/assets/images/pragmatic-member.png" alt="" /></p>

<p>Where principle-focused developers see company work as a chance to learn and grow, pragmatic developers view it more as a job—an economic activity. So when faced with issues, principle-focused developers tend to put in extra effort to get to the root cause, while pragmatic developers solve the immediate problem with minimal effort.</p>

<p>Pragmatic team members come in various forms:</p>

<ol>
  <li>Diligent but not passionate about development.
    <ul>
      <li>This type can do tasks that principle-focused members find tedious or burdensome. Their lack of passion for development isn’t necessarily a drawback. They tend to cause fewer complications and can have a smooth career.</li>
    </ul>
  </li>
  <li>Diligent and passionate about development.
    <ul>
      <li>This can be puzzling at first. If they’re passionate, shouldn’t they be principle-focused? Yet they show little interest in maintainability. Even if you point out issues and offer guidance, they always look for the quickest fix.</li>
      <li>Such developers are often driven not by pure love of software craftsmanship but by job-focused enthusiasm. Their interest in development might be mainly because they need it for their career. For example, they study design patterns or algorithms primarily because those come up in interviews. They rarely delve deeply into such topics unless it’s necessary.</li>
    </ul>
  </li>
  <li>Lacking passion for the job itself.
    <ul>
      <li>They may be a principle-focused developer who lost motivation due to disillusionment with the company’s direction, or they simply might not care about their work at all.</li>
      <li>If they’re simply doing the bare minimum, conflict with the team lead might be minor. However, the problem is that as they lose motivation, they take less responsibility. For instance, they may make changes without thorough testing, or only carry out tasks exactly as assigned without any proactive problem-solving. Over time, this hurts collaboration and morale.</li>
    </ul>
  </li>
</ol>

<p>In general, pragmatic team members find it difficult to grow as developers. They often remain in a company for a long time and become mid-level managers. But without a distinctive advantage, staying in that role indefinitely can be hard. Having seen many regret stepping into management, I urge them to think carefully about the path they truly want.</p>

<p>Here’s what I’d say to a pragmatic team member:</p>

<p><strong>There is no easy or comfortable path. You grow as much as you wrestle with tough problems.</strong></p>

<p>Because pragmatic developers prioritize efficiency, they have fewer opportunities for deep pondering. Yet, whether it’s about technology or human relationships, it’s in the struggle that real growth happens—and with growth comes differentiation.</p>

<h2 id="4-a-pragmatic-team-lead">4. A Pragmatic Team Lead</h2>

<p><img src="/assets/images/pragmatic-leader.webp" alt="" /></p>

<p>Many developers become pragmatic team leads. This includes not only those who’ve been pragmatic team members but also those who began as principle-focused leads but eventually turned pragmatic. How can a principle-focused lead transform into a pragmatic lead?</p>

<p>A principle-focused lead might learn about OOP, design patterns, TDD, DDD, MSA, and more, only to find that putting these into practice is no easy feat. These methodologies and architectures all tie together, demanding extensive effort and experience to implement successfully.</p>

<p>For instance, applying MSA (Microservices Architecture) effectively requires a solid understanding of OOP, design patterns, and DDD (Domain-Driven Design). However, many developers never master even OOP and design patterns. TDD also demands a strong foundation in OOP and domain knowledge, plus a flexible design approach.</p>

<p>If a principle-focused lead hasn’t reached that level, trying to apply advanced development methods often creates more problems than it solves. After experiencing several such failures, they may dismiss formal methodologies as unrealistic.</p>

<p>So, from a pragmatic lead’s perspective, principle-focused developers are simply naive—chasing impressive theories that are disconnected from real-world needs. Pragmatic leads see many colleagues preach fancy practices, only to delay project timelines without noticeably improving quality. Therefore, they sometimes view principle-focused developers’ efforts as a waste of time.</p>

<p>Pragmatic leads generally care less about technology and more about analyzing requirements and managing schedules—naturally shifting into a managerial role.</p>

<p>I rarely see pragmatic team leads actively conduct code reviews or provide strong technical guidance. Usually, they assign tasks at the module level and check the final output. If a difficult technical issue arises that a team member can’t solve, the lead might step in. But as the team grows, the lead moves closer to a pure management position.</p>

<p>Another reason pragmatic leads transition fully into management is that development becomes repetitive—without ongoing learning of new technologies or methodologies, every project feels the same. Tired of such repetition, they often prefer management to continuing as a developer.</p>

<p>From my experience, pragmatic leads can yield good results in short-term (under 1 year) SI-type projects. But when a project stretches beyond a year, maintaining quality becomes harder and higher-level managers start to notice issues.</p>

<p>When a pragmatic lead develops an in-house product, they might repeatedly opt to rebuild from scratch rather than continuously improve code. After it grows to a certain level of complexity, they abandon it and start fresh, repeating this cycle every 1–3 years or so.</p>

<p>If the same person maintains a product for years, they might avoid rebuilding, but once that person leaves, maintenance skills drop dramatically, which again leads to rebuilding.</p>

<p>Finally, to pragmatic team leads:</p>

<p><strong>Do not focus on what you can do, but on what must be done.</strong></p>

<p>Sometimes you’ll face elusive bugs requiring extensive research and trial and error. If you only patch them superficially, they’ll likely morph into an even bigger problem later.</p>

<h2 id="5-the-micromanager">5. The Micromanager</h2>

<p><img src="/assets/images/micro-manager.webp" alt="" /></p>

<p>A micromanager is a leader who intervenes excessively in how team members carry out their work.</p>

<p>They typically come in two categories:</p>
<ol>
  <li>A manager who claims to be—or once was—a developer.</li>
  <li>Someone without real development experience but who believes they know enough.</li>
</ol>

<p>The common trait is that they think they know enough to weigh in on every detail.</p>

<p>Because micromanagers overestimate their own technical abilities, they often share some traits with principle-focused leads—for example, demanding thorough design and documentation. The difference is that, as a manager, their decisions have a broader impact on the entire organization.</p>

<p>A micromanager doesn’t do the coding themselves, so it’s easy for them to pick idealistic or principle-focused approaches. Detached from day-to-day coding realities, they favor what sounds perfect in theory.</p>

<blockquote>
  <p>I once worked at a security company.</p>

  <p>The service quality had been steadily declining, so the manager demanded detailed design documents from every team lead. However, the C++ source code was so huge and tangled—single files exceeding 50k lines—that the code’s structure was already a mess.</p>

  <p>It’s normal to do design first and then implement, but the manager demanded we reverse-engineer documentation from already messy code.</p>

  <p>After about three weeks, the team gave up trying to produce those design documents. Tragically, the manager believed the team had failed due to lack of skill, rather than realizing the directive itself was misguided.</p>

  <p>If the manager felt the team’s capabilities were lacking, the correct approach would have been to hire a more qualified developer rather than impose additional burdens on the existing team.</p>
</blockquote>

<p>Managers and team leads have distinct roles. A lead shouldn’t become a pure manager, but equally a manager shouldn’t act like the team lead. When a manager tries to play team lead, the lead can’t exercise their full expertise, and the manager also fails to focus on their own management duties.</p>

<p>Often, managers claim they lead development because of necessity, but in reality, it can be more of a personal preference. If they were prudent, they’d either replace the team lead or adjust the team’s responsibilities.</p>

<p>There’s a saying:</p>

<p><strong>疑人不用 用人不疑(If you doubt a person, do not hire them; if you hire them, do not doubt them).</strong></p>

<blockquote>
  <p>At a company providing specific data services, the CEO was extremely sharp, and the development team lead was a well-respected developer with both passion and skill.</p>

  <p>At first, the CEO was heavily involved in the development process, but it was a startup environment where, even if service outages occurred, they were generally understanding.</p>

  <p>A few years later, I revisited and found things had changed dramatically. The original developers were sitting in a separate space with vague tasks, while important work was handled by a new development team under the direct oversight of the CEO. When I asked why, I was told the CEO repeatedly criticized the quality of the old group’s output and eventually decided to lead a new team personally.</p>

  <p>This led to another big round of failures. In such a scenario, the CEO should have hired developers who matched his standards rather than trying to manage every detail himself.</p>
</blockquote>

<h2 id="6-conflict-between-a-principle-focused-lead-and-a-pragmatic-lead">6. Conflict Between a Principle-Focused Lead and a Pragmatic Lead</h2>

<p><img src="/assets/images/principled-pragmatic-micro.webp" alt="" /></p>

<p>In a project where a principle-focused lead and a pragmatic lead cooperate harmoniously, it often means there’s a bigger external threat: perhaps a demanding client or a high-pressure micromanager overshadowing any internal disagreements.</p>

<p>Otherwise, whenever the two leads must collaborate (e.g., on API design), they’ll clash over almost every decision.</p>

<h3 id="61-the-principle-focused-leads-view">6.1. The Principle-Focused Lead’s View</h3>

<p>The principle-focused lead feels held back by the pragmatic lead.</p>

<ul>
  <li>In API design, the pragmatic lead wants minimal changes to their own code, so the resulting API is less intuitive, harder to understand, and forces more work on the principle-focused lead.</li>
  <li>As the project evolves, new APIs might be needed. But if the existing API can be adapted—even if awkwardly—the pragmatic lead will push to reuse it.</li>
  <li>This reinforces the principle-focused lead’s belief that the pragmatic lead only cares about their immediate convenience, lacks vision, and generally lacks skill.</li>
  <li>The principle-focused lead worries that continually deferring to the pragmatic lead’s approach will cause severe problems eventually.</li>
  <li>They also notice the system is aging and has structural issues, but the pragmatic lead keeps rejecting large-scale refactoring plans.</li>
  <li>This simplistic development strategy doesn’t help the principle-focused lead grow as a developer.</li>
</ul>

<h3 id="62-the-pragmatic-leads-view">6.2. The Pragmatic Lead’s View</h3>

<p>The pragmatic lead thinks the principle-focused lead unnecessarily complicates the project.</p>

<ul>
  <li>The principle-focused lead introduces technologies they themselves haven’t fully mastered, making the system overly complex.</li>
  <li>They fixate on personal growth, neglecting project deadlines or success.</li>
  <li>The two may have agreed on an API, yet the principle-focused lead keeps requesting small changes. Their obsession with details slows progress.</li>
  <li>Refactoring or rewriting from scratch doesn’t guarantee real improvement; it just threatens schedules.</li>
</ul>

<h3 id="63-the-micromanager-as-mediator">6.3. The Micromanager as Mediator</h3>

<p>The micromanager believes they can hear both sides and make logical decisions.</p>

<p>They aim to be fair and objective, but in reality, the principle-focused lead starts at a disadvantage. Suggesting change or introducing new methods is always harder to justify than doing nothing. The principle-focused lead typically has to articulate a lengthy argument, referencing theory to persuade the micromanager.</p>

<p>By contrast, the pragmatic lead can simply ask, “But why do we need to change it?”—an easy position to defend. Even a knowledgeable principle-focused lead struggles with repeated “Why?” questions, especially since they must also persuade a micromanager who might lack technical depth. It becomes a 2-on-1 situation.</p>

<p>Even if the principle-focused lead has some theoretical background, it might not carry much weight when explaining to a micromanager who only has a vague sense of feasibility. Ultimately, the micromanager’s goal of making a purely logical judgment often gives way to recommending a compromise that accounts for both parties’ feelings.</p>

<p>Over time, the micromanager may side more with the pragmatic lead. The pragmatic approach is easier to understand and delivers quick, visible outcomes.</p>

<p>Or the micromanager might drop mediation, instructing both leads to “work it out.” This is the worst outcome. With no final arbiter, the conflict intensifies, and the project risks failing altogether.</p>

<h3 id="64-possible-solutions">6.4. Possible Solutions</h3>

<p>Ultimately, the situation of two leads butting heads often stems from the micromanager themselves. Perhaps the manager holds final decision-making authority, imagining they can moderate the two leads while also wanting to retain control of development.</p>

<p>A truly senior tech lead with vast experience could mediate effectively, but that would require the senior tech lead to oversee the project and lead the team leads. Usually, there isn’t a more seasoned, higher-level tech lead the team leads can trust.</p>

<p>When no senior tech lead exists, having the manager personally mediate is difficult. Favoring one side alienates the other. In the long run, it’s best to assign clear authority and responsibility to one lead, accepting the associated risks. If it’s a short-term external contract project, a pragmatic lead might be best. If it’s a long-term internal product needing continuous improvement, a principle-focused lead might be more appropriate. Hiring developers thoughtlessly can create “technical debt” in the team itself, making it unmanageable over time.</p>

<blockquote>
  <p>I worked at a company headquartered in Europe, developing a large online service. Multiple development teams all contributed to the same product, alongside a dedicated QA team. Notably, there was an Architecture (Architect) team, including a chief architect at the top.</p>

  <p>Because design, implementation, and testing were all separated, design discussions happened before coding. Architects, dev teams, and QA teams would meet to discuss design details and testing approaches.</p>

  <p>All interface and design decisions came from the architects, so it was rare for two dev teams to clash. A development lead might disagree with the architects’ decisions, but the architects held ultimate authority and responsibility for design. Therefore, it never escalated into a major issue.</p>
</blockquote>

<h2 id="7-conclusion">7. Conclusion</h2>

<p>The clash isn’t truly caused by principle-focused vs. pragmatic approaches. Even if two people have different ideologies, trust and mutual respect can lead to a smooth project.</p>

<p>What causes conflict is human emotion and personal ambition. Once their interests diverge, the ideological gap just magnifies the rift.</p>

<p>From the manager’s viewpoint, pragmatic developers’ arguments can seem very appealing. Still, one must think carefully about what happens if a company continues with purely pragmatic development for years.</p>

<p>A principle-focused approach doesn’t yield immediate results; it also involves strong opinions and sometimes leads to costly over-engineering. If the company can’t handle that trial and error, it may drift toward a purely pragmatic approach, ultimately leaving only pragmatic developers. Hiring a principle-focused developer into that environment later on won’t fix anything—the existing pragmatic leads will push back.</p>

<p>Conversely, if principle-focused developers dominate, they may focus more on research or experimental technologies, causing productivity to plummet. Since they don’t fully grasp every facet of advanced development theory, software quality might not improve that much anyway.</p>

<p>A manager who values software quality sees the potential in principle-focused developers’ trial and error. However, their growth can be slower than expected.</p>

<p>To address these issues, at least one competent senior technical leader is needed. Such a leader can reduce principle-focused developers’ missteps and utilize pragmatic developers effectively.</p>

<p>Without that senior leader, a company must select developers based on the nature of the product. For in-house products needing ongoing improvement, minimize hiring too many pragmatists. For short-term outsourcing, do the opposite and minimize principle-focused developers. Just like technical debt piles up and hinders maintainability, recklessly hiring the wrong people for expediency can create “hiring debt” that endangers the development organization’s stability.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">소프트웨어 개발의 이념 전쟁: 개발자는 왜 그런가요?</title><link href="/2024/02/03/principled-pragmatic.html" rel="alternate" type="text/html" title="소프트웨어 개발의 이념 전쟁: 개발자는 왜 그런가요?" /><published>2024-02-03T00:00:00+00:00</published><updated>2024-02-03T00:00:00+00:00</updated><id>/2024/02/03/principled-pragmatic</id><content type="html" xml:base="/2024/02/03/principled-pragmatic.html"><![CDATA[<p><img src="/assets/images/principle-pragmatic.webp" alt="" /></p>

<p>과거 냉전 시대의 공산주의와 자본주의처럼 양립할 수 없는 두 가지 이념이 소프트웨어 개발 분야에 존재한다. 바로 원리주의와 실용주의다. 소프트웨어 개발은 매우 복잡한 과정이며, 이 두 가지 이념은 각기 다른 방식으로 문제에 접근한다. 따라서 원리주의와 실용주의는 소프트웨어 개발의 성패를 좌우하는 중요한 요소라 할 수 있다.</p>

<p>원리주의자들은 체계적인 소프트웨어 개발 이론을 바탕으로 개발을 진행해야 한다고 믿는다. 이들은 유지보수의 중요성을 강조하며, 장기적인 관점에서 신중하게 코드를 작성할 것을 주장한다. 반면 실용주의자들은 문제를 최대한 간단하고 빠르게 해결하는 데 초점을 맞춘다. 소프트웨어는 복잡하기 때문에 아무리 신중하게 코드를 작성해도 효과가 없다고 생각한다. 그래서 초기에 많은 시간을 투자하기보다는 문제가 발생할 때마다 즉각 대응하는 것이 효율적이라고 믿는다.</p>

<p>대부분의 개발자는 극단적인 원리주의와 실용주의 사이 어딘가에 위치하겠지만 이 글에서는 극단적인 원리주의 개발자와 실용주의 개발자에 초점을 맞춰서 설명한다. 이들의 상반된 관점과 접근 방식, 그리고 협업 과정에서 발생하는 문제들을 살펴본다.</p>

<h2 id="1-원리주의-팀원">1. 원리주의 팀원</h2>

<p><img src="/assets/images/principle-member.webp" alt="" /></p>

<h3 id="11-실용주의-팀장과의-갈등">1.1 실용주의 팀장과의 갈등</h3>

<p>성장 욕구와 열정이 넘치는 주니어 개발자는 원리주의적 성향을 보일 가능성이 높다. 이런 원리주의 팀원이 원리주의 팀장을 만나면 행복하겠지만 현실은 원리주의 팀원과 실용주의 팀장의 조합이 더 많다.</p>

<p>실용주의 팀장에 속한 원리주의 팀원은 개발팀에서 힘든 위치에 놓일 수 있다. 팀장에게 코드 리뷰를 기대하지 못하는 것은 당연하고 팀장이 일정을 재촉하기 때문에 코드 품질에 신경 쓸 여력도 없다. 일정에 여유가 있어서 리팩토링을 하더라도 팀장의 눈치를 봐야 한다. 원리주의 팀원은 문제가 발생하면 그 원인이 무엇인지 파악하고 올바르게 조치하기 위해서 노력한다. 그런데 실용주의 팀장이 원인을 무시하고 문제를 쉽게 해결할 수 있는 방법을 제시할 수 있다.</p>

<p>이런 일이 반복되면 원리주의 팀원은 답답함을 느낀다. 팀장의 역량과 책임감이 부족하다고 여기게 된다. 팀장에게서 배울 것이 없고 존경할 만한 업무 태도도 아니라고 생각하기 때문에 팀장을 무시하는 언행을 하기도 한다. 팀장도 그것을 느끼고 원리주의 팀원을 감정적으로 대한다. 원리주의 팀원은 정신적으로 점점 힘들어지고 결국 퇴사를 하게 된다. 그렇지만 회사를 옮겨도 결국 높은 확률로 실용주의 팀장을 만나게 되기 때문에 원리주의 팀원의 어려움은 쉽게 해결되지 않는다.</p>

<h3 id="12-성장을-저해하는-프로젝트">1.2 성장을 저해하는 프로젝트</h3>

<p>원리주의 팀원은 성장 욕구가 강한 만큼 회사의 업무가 자신의 성장에 도움이 되지 않는다고 생각하면 초조해 할 것이다. 성장에 도움이 되지 않는 일은 기술부채가 잔뜩 쌓인 코드를 유지보수 하거나 신규 개발이라도 오래되거나 대중적이지 않은 기술을 사용하는 프로젝트가 있다.</p>

<p>이런 상황에서 실용주의 팀장이라면 현재 상황을 유지하려는 경향이 강하기 때문에 대규모 리팩토링이나 신기술 도입을 가능한 피하려고 할 것이다. 원리주의 팀원이 대안을 제시해도 수용하지 않을 것이다. 첫 단추를 잘 꿰어야 하듯이 주니어 시절의 프로젝트가 개발자의 성장 방향에 큰 영향을 줄 수 있다. 맞지 않다고 생각되면 과감하게 팀을 떠나는 것도 나쁘지 않다.</p>

<p>그러나 팀장이 원리주의 성향이라면 기다리는 것을 추천한다. 현재 프로젝트에 기술적인 문제가 많다면 새로 만들 기회가 생길 수도 있다. 그렇게 되면 기존 프로젝트를 유지보수 하면서 도메인과 요구사항을 파악했기 때문에 기술에 더 집중할 수 있는 환경이 될 것이다. 물론 원리주의 팀원 자신이 그런 프로젝트를 맡을 수 있을 만큼 준비가 되어있어야 한다.</p>

<h3 id="13-원리주의-팀원에게-전하고-싶은-말">1.3 원리주의 팀원에게 전하고 싶은 말</h3>

<p>원리주의 팀원에게 이런 말을 전하고 싶다.</p>

<p><strong>“회사는 학원이 아니다.”</strong></p>

<p>회사는 내 시간과 기술을 팔고 돈을 받는 곳이다. 회사에서 하고 싶은 일만 할 수는 없다.</p>

<blockquote>
  <p>나는 잦은 이직을 하고 여러 팀장을 만나면서 내 뜻을 존중해 주는 팀장도 있었지만 그 중에서 두 번은 극단적인 실용주의 팀장이었다. 이 극단적인 실용주의 팀장은 자신감과 열정이 넘치는 어린 팀원이 마음에 들지 않았는지 노골적으로 견제하는 모습을 보여주기도 했다. 그래도 나는 팀원의 입장에서 최대한의 존중을 했다고 생각한다. 팀장과 갈등을 겪고 있을 때 다른 팀원들에게 내가 뭔가 잘못했냐고 여러차례 물어봤지만 단지 둘이 안 맞아서 그렇다는 대답이 대부분이었다.</p>

  <p>지금 생각해 보면 실용주의 팀장 자신의 개발 역량이 뒤쳐지는 것을 불안해 하는 와중에, 원리주의 팀원이 디자인 패턴이나 리팩토링 같은 개발 이론을 공공연하게 떠들고 다니면서 그 불안감을 더 자극한 것은 아닐까 싶다. 그래서 실용주의 팀장의 눈에 자신감 넘치고 눈치는 없는 팀원이 곱게는 안 보였을지도 모른다.</p>
</blockquote>

<h2 id="2-원리주의-팀장">2. 원리주의 팀장</h2>

<p><img src="/assets/images/principle-leader.webp" alt="" /></p>

<p>원리주의 팀원의 열정이 계속 된다면 대체로 원리주의 팀장이 된다. 팀장이라고 했지만 프로젝트의 주도권을 갖고 개발하는 위치에 있다면 여기에 해당한다.</p>

<h3 id="21-오버-엔지니어링">2.1. 오버 엔지니어링</h3>

<p>원리주의 팀장은 미래 대비에 지나치게 집착하는 경향이 있다. 이는 과도한 추상화, 불필요한 디자인 패턴의 적용 등의 오버 엔지니어링으로 나타난다. 이것은 오히려 코드의 복잡성을 높이고 개발 효율성을 저하시키는 결과를 초래한다. 유지보수를 위한 원리주의가 오히려 유지보수성을 해치는 비극이 되는 것이다.</p>

<p>이런 오버 엔지니어링은 관리자에게 답답함과 불안감을 느끼게 한다. 원리주의 팀장이 설계의 중요성을 강조하면서 열심히 하고는 있는데 눈에 보이는 결과물이 없으니 일정이 무척 걱정된다. 프로젝트 초기에는 시간 여유가 있어서 믿고 기다려 보지만 한계점에 이르면 적극적으로 일정을 관리하게 된다.</p>

<p>원리주의 팀장이 미래 대비를 철저히 할수록 프로젝트 전체를 통찰하는 데에는 약할 수 있다. 그런데 설계와 기술연구에 많은 시간을 소비한 상태에서 프로젝트 중간에 요구사항이 크게 변경되거나 미처 파악하지 못한 기술적인 문제가 드러나면 어떻게 될까?</p>

<p>원리주의 팀장은 이런 문제의 원인이 개발팀 외부에 있기 때문에 자신의 책임이 아니라고 생각할 수 있다. 그리고 이런 문제에 대비하는 것은 불가항력이기 때문에 프로젝트 기간을 늘리거나 기능을 줄이는 것이 합리적이라고 생각할 수 있다. 그러나 관리자는 이런 변화나 문제에 쉽게 대응하지 못한다면 왜 설계에 많은 시간을 할애했는지 납득할 수 없을 것이다.</p>

<p>이렇게 되면 관리자 입장에서는 유지보수야 어찌됐든 당장의 생산성이라도 높은 실용주의 팀장의 개발 방법이 더 나을 수 있다. 원리주의 팀장은 그런 관리자의 평가를 납득하지 못한다. 좋은 품질을 위한 자신의 노력이 부정당하는 것에 답답함을 느낀다.</p>

<blockquote>
  <p>일부는 내 이야기다. 나는 새 프로젝트를 시작하면 항상 기술적인 도전 과제를 설정하고는 했다. 이번 프로젝트에서는 TDD나 DDD를 적용해 보는 식으로 말이다. 이 도전이 얼마나 많이, 또 오래 지속되는지는 관리자의 피드백에 달렸다. 대체로 프로젝트를 시작하고 한 달이 넘도록 제품 개발은 더디고 기술 연구만 하고 있으면 개발 진행이 더디다는 관리자의 주의가 주어진다.</p>
</blockquote>

<h3 id="22-오버-프로세싱">2.2. 오버 프로세싱</h3>

<p>오버 프로세싱은 과도하게 형식적이고 비효율적인 개발 프로세스를 뜻한다.</p>

<p>오버 엔지니어링이 관리자를 힘들게 한다면 오버 프로세싱은 팀원들을 힘들게 하는데, 주로 다음과 같은 것들이 있다.</p>

<ol>
  <li>지나치게 형식적이고 자세한 개발 문서 요구</li>
  <li>지나치게 엄격한 코딩 규칙 적용</li>
  <li>테스트 커버리지에 대한 강박</li>
</ol>

<p>원리주의 팀장은 높은 테스트 커버리지를 달성하기 위해 팀원들에게 과도한 테스트 작성을 요구하곤 한다. 물론 테스트는 중요하지만, 무작정 커버리지 수치를 높이는 데에만 집중하다 보면 오히려 코드의 유연성이 떨어지고 테스트 코드 자체가 복잡해져서 유지보수가 어려워진다.</p>

<p>원리주의 팀장의 올바른 개발 방법론 주장에 팀원들은 많은 기대를 할 수 있다. 그러나 얼마 지나지 않아 원리주의 팀장의 지나치게 체계적인 접근과 꼼꼼한 계획 요구에 팀원들은 지칠 것이다.</p>

<p>원리주의 팀장의 관리가 느슨하다면 팀원들은 조금씩 지시를 무시하기 시작할 것이다. 반면, 관리가 철저하다면 팀장 자신이 코딩할 시간이 줄어드는 것은 물론이고, 팀원들의 사소한 잘못들을 지적하게 된다. 팀원들은 사소한 지적에 압박감을 느낄 것이고, 원리주의 팀장은 팀원들의 부족함에 답답함을 느낄 것이다.</p>

<p>원리주의 팀장의 지나친 요구사항들은 때로는 팀장 자신도 완벽하게 해내기 어려운 업무일 수 있다. 특히 소프트웨어 설계는 복잡하고 추상적인 개념을 다루기 때문에, 자신의 아이디어를 명확하게 문서화하는 것조차 쉽지 않다. 그런데도 원리주의 팀장은 경험이 부족한 팀원들에게 제대로 된 가이드라인도 없이 설계를 요구하곤 한다. 이는 마치 초등학생이 독후감을 써야 하는 것만큼이나 팀원들에게는 막막한 일이 될 수밖에 없다.</p>

<blockquote>
  <p>새 회사에 팀장으로 합류했을 때였다. 이전 팀장이 열정 넘치는 원리주의자였는지 팀원들에게 테스트의 코드 커버리지 100%를 요구했다고 한다. 물론 100%를 유지하는 것은 좋은 목표다. 문제는 함수마다 테스트를 꼼꼼하게 작성해서 작은 변경에도 많은 테스트가 깨진다는 것이다. 함수는 독립적으로 실행되는 것이 아니라 다른 함수를 호출하고 호출된다. 그래서 테스트는 유지보수와 생산성 등을 고려해 적절한 단위로 작성되어야 하는데, 이 부분이 간과된 것으로 보인다.</p>

  <p>결과적으로 테스트 코드가 1/10로 줄어들면서 팀원들은 더 적극적으로 테스트 코드를 작성하게 됐다.</p>
</blockquote>

<h3 id="23-문제의-원인">2.3. 문제의 원인</h3>

<p>원리주의 팀장은 가장 많은 시행착오를 겪는 시기인데, 이는 권한에 비해 실력과 경험이 부족하기 때문이다. 개인에 따라서는 넘치는 자신감이 문제를 더 키우기도 한다.</p>

<p>열정과 자신감은 어느 정도 상관관계가 있기 때문에, 열정이 넘치는 원리주의 팀장은 높은 자신감을 가지는 경향이 있다.</p>

<p>높은 자신감은 문제의 원인을 다른 사람에게서 찾게 만들고, 강한 자기 주장을 하게 만들기도 한다. 이런 언행은 관리자와 동료들에게 큰 부담이 되는데, 본인은 그것을 알지 못한다.</p>

<p>마지막으로, 원리주의 팀장에게 이런 말을 전하고 싶다.</p>

<p><strong>“하고 싶은 일이 아니라, 해야 하는 일을 해라”</strong></p>

<p>하려는 일이 꼭 필요한 일인지 냉정하게 자신의 생각을 돌아봐야 한다. 원리주의 팀장은 본능적으로 하고 싶은 일을 해야 하는 일이라고 합리화 하는 경향이 있다.</p>

<h2 id="3-실용주의-팀원">3. 실용주의 팀원</h2>

<p><img src="/assets/images/pragmatic-member.png" alt="" /></p>

<p>원리주의 팀원은 회사 일을 성장의 기회로 삼으려고 하는 반면에 실용주의 팀원은 회사의 일을 경제 활동으로 받아들인다. 그래서 문제가 있을 때 원리주의 팀원은 과도한 노력을 기울이게 되고 실용주의 팀원은 최소한의 노력으로 문제를 해결하려고 한다.</p>

<p>실용주의 팀원은 다양한 유형이 있다.</p>

<p>첫 번째 유형은 성실하지만 개발에 대한 열정은 낮은 경우다. 이런 유형은 원리주의 팀원이 힘들어 하는 일을 잘 할 수 있기 때문에 개발에 대한 열정이 낮은 것이 단점은 아니다. 개발에 대한 욕심이 적은 만큼 문제를 일으키는 일도 적어서 무난하게 회사 생활을 할 수 있다.</p>

<p>두 번째 유형은 성실하고 개발에 대한 열정도 높은 경우다. 나는 이런 유형의 개발자를 만났을 때 처음에는 이해가 되지 않았다. 개발에 대한 열정이 높다면 원리주의 팀원이 될 것 같은데 유지보수에 대한 관심이 없다. 문제점을 지적하고 몇 번 가이드를 해도 결국은 최소 비용으로 문제를 해결한다.</p>

<p>이런 유형의 실용주의 팀원은 개발에 대한 순수한 열정이라기 보다는 일에 대한 열정이 높은 것이고 필요에 의해서 개발에 관심을 갖는 경우인 것 같다. 그러다 보니 더 좋은 회사로 이직하는 데 도움이 되는 기술을 우선해서 학습하는 경향이 있다. 실용주의 팀원이 디자인 패턴을 공부한다면 그것이 궁금하기 보다는 면접에서 문제로 나올 수 있기 때문이다. 그래서 깊이있게 학습하지는 않는다. 알고리즘도 열심히 학습하는데 코딩 테스트에 필요하기 때문이다.</p>

<p>세 번째 유형은 일에 대한 열정이 낮은 경우다. 이런 경우 보통은 회사 업무가 마음에 들지 않아서 동기부여가 되지 않는 원리주의 팀원인 경우가 많다. 혹은 그냥 일 자체에 관심이 없는 경우다.</p>

<p>열정이 낮아도 일만 제대로 한다면 팀장과 갈등은 크지 않을 것이다. 문제는 일이 하기 싫으니 책임을 점점 소홀히 한다는 것이다. 예를 들어 코드를 변경하면 테스트를 꼼꼼히 해야 하는데 테스트는 커녕 빌드만 해서 완료 보고를 하는 경우다. 또는 지시한 일만 수동적으로 수행할 뿐 스스로 일을 찾아서 하지는 않기 때문에 팀장의 관리 비용이 높아진다. 이런 일을 반복하면 다른 사람과의 관계도 안 좋아질 것이다.</p>

<p>어떤 유형이든 실용주의 팀원은 개발자로 성장하기 힘들다. 한 회사에 오래 머물면서 중간 관리자가 되는 것이 보통이다. 그런데 중간 관리자가 되는 것은 쉽지만 차별화되는 장점이 없다면 그 자리를 끝까지 지키는 것은 어려울 수 있다. 관리자가 된 것을 후회하는 경우를 많이 봐온 입장에서 자신이 원하는 방향이 무엇인지 심사숙고 하기를 조언한다.</p>

<p>실용주의 팀원에게 이런 말을 전하고 싶다.</p>

<p><strong>“쉽고 편한 길은 없다. 고민하는 만큼 성장한다.”</strong></p>

<p>실용주의 팀원은 효율을 우선하기 때문에 고민의 기회가 적다. 그러나 인간 관계든 개발이든 고민하는 만큼 성장할 수 있고 성장하는 만큼 차별화를 이룰 수 있다.</p>

<h2 id="4-실용주의-팀장">4. 실용주의 팀장</h2>

<p><img src="/assets/images/pragmatic-leader.webp" alt="" /></p>

<p>많은 개발자들이 실용주의 팀장이 되는데 실용주의 팀원은 물론이고 원리주의 팀장도 실용주의 팀장이 될 수 있다. 실용주의 팀원이 실용주의 팀장이 되는 것은 자연스러운데, 원리주의 팀장이 실용주의 팀장이 되는 것은 무슨 말일까?</p>

<p>원리주의 팀장이 OOP, 디자인 패턴, TDD, DDD, MSA 등 많은 개발 방법론과 아키텍처를 학습하지만 실제 프로젝트에 적용하기는 쉽지 않다. 이런 방법론과 아키텍처는 서로 이어져 있어서 프로젝트에 적용하려면 정말 많은 노력과 경험이 필요하다.</p>

<p>예를 들면 MSA(Microservices Architecture)를 올바르게 적용하려면 현대적인 개발 방법의 근간인 OOP와 디자인 패턴은 물론이고 DDD(Domain-Driven Design)를 잘 알아야 한다. 그런데 현실은 OOP와 디자인 패턴조차 제대로 깨닫지 못하는 경우가 보통이다. TDD(Test-Driven Development)도 OOP/디자인패턴은 기본이고 도메인에 대한 이해와 유연한 설계가 가능해야 한다.</p>

<p>이 정도 수준에 이르지 못하면 학습했던 개발 방법론을 실제 프로젝트에 적용하는 것은 힘들다. 프로젝트에 적용해 봤으나 결국 문제만 키우는 경험을 몇 번 하고나면 개발 방법론을 현실과 동떨어진 이상론으로 치부하게 된다.</p>

<p>그래서 실용주의 팀장의 눈에 원리주의 개발자는 아직 현실을 모르고 그럴듯한 이론에 빠져서 헛된 시간을 보내는 것으로 보인다. 실용주의 팀장은 주변에서 개발 방법론의 중요성을 외치는 많은 동료들을 봐왔지만 개발 일정만 늦어질 뿐 딱히 품질이 좋아지는 경우를 본 적이 없다. 그래서 원리주의 팀원의 노력을 시간 낭비로 보고 한심하게 여기기도 한다.</p>

<p>실용주의 팀장은 기술에 관심이 적은 만큼 요구사항 분석과 일정 관리에 더 많은 노력을 기울인다. 그 과정에서 자연스럽게 관리자로 전향하게 된다.</p>

<p>나는 실용주의 팀장이 코드 리뷰와 같이 적극적으로 기술 리드를 하는 경우를 본 적이 없다. 팀원들에게 모듈 단위로 일을 할당하고 결과를 확인하는 정도가 보통이다. 팀원이 해결하지 못하는 기술적인 문제가 발생하면 직접 해결하기도 하지만 팀원이 늘어가면서 관리자에 조금씩 가까워지는 것 같다.</p>

<p>실용주의 팀장이 관리자로 전향하는 이유 중에 하나는 개발이 새롭지 않고 반복적이기 때문이다. 실용주의 팀장은 새로운 기술이나 방법론을 학습하지 않기 때문에 개발 과정도 과거와 크게 달라지지 않는다. 이런 반복적인 작업에 염증을 느끼고 관리자가 되는 경우도 종종 보게 된다.</p>

<p>내 경험에 실용주의 팀장은 SI 같은 1년 미만으로 진행되는 프로젝트에서 좋은 성과를 낼 수 있다. 그러나 프로젝트가 1년 이상 지속되면 품질 관리가 어려워지면서 관리자도 문제가 있는 것을 눈치채기 시작할 것이다.</p>

<p>그런 실용주의 팀장이 자사 프로덕트를 개발하게 되면 계속 다시 만드는 전략을 취하기도 한다. 그러니까 코드를 계속 개선하는 것이 아니라 프로젝트가 일정 수준에 다다르면 복잡해진 기존 코드는 그대로 두고 처음부터 새로 만들기 시작하는 것이다. 이렇게 조금씩 기능을 확장해 나가는 전략을 취하는데 반복하는 주기는 보통 1~3년 정도라고 생각된다.</p>

<p>실용주의 팀장이 프로덕트를 다시 만드는 일 없이 몇 년 동안 유지하는 경우도 있다. 개발 담당자가 바뀌지 않는 경우인데 그 담당자가 퇴사하면 유지보수 능력이 급락하게 되고 결국 다시 만들어야 하는 상황이 된다.</p>

<p>마지막으로, 실용주의 팀장에게 이런 말을 전하고 싶다.</p>

<p><strong>“할 수 있는 일이 아니라, 해야 하는 일을 해라”</strong></p>

<p>떄로는 원인을 알 수 없는 버그로 많은 연구와 시행착오를 겪어야 할지도 모른다. 단순히 문제를 덮기 위한 코드를 작성한다면 대부분은 다른 형태로 더 큰 문제가 되어서 돌아온다.</p>

<h2 id="5-마이크로-관리자">5. 마이크로 관리자</h2>

<p><img src="/assets/images/micro-manager.webp" alt="" /></p>

<p>마이크로 관리자(Micromanager)는 조직 내에서 구성원들의 업무 수행 과정에 지나치게 관여하고 통제하려 하는 관리자를 말한다.</p>

<p>마이크로 관리자는 크게 두 가지 배경으로 나뉜다. 하나는 개발자였다고 주장하는 관리자이고, 다른 하나는 개발 경력은 없지만 어느 정도 안다고 생각하는 관리자다. 이들의 공통점은 자신이 충분히 안다고 착각하는 것이다.</p>

<p>마이크로 관리자가 자신의 실력을 과신한다는 점에서 원리주의 팀장과 비슷한 면이 있는 만큼 원리주의 팀장의 문제점을 일부 공유하는데 대표적으로 철저한 설계와 문서 작성 요구가 있다. 차이가 있다면 관리자인 만큼 프로젝트와 조직 전체에 미치는 영향이 더 크다는 것이다.</p>

<p>마이크로 관리자는 직접 개발을 하지 않기 때문에 쉽게 원리주의적 접근을 선택기도 한다. 이는 관리자가 개발 현장에서 벗어나기 때문에 현실적인 제약보다는 이상적인 접근을 선호하게 되는 경향 때문이다.</p>

<blockquote>
  <p>보안 관련 회사에서 팀원으로 일했을 때의 일이다.</p>

  <p>회사 서비스의 품질이 지속적으로 하락하자 관리자는 각 팀장에게 설계 문서를 작성하라는 지시를 내렸다. 당시 C++로 작성된 소스 코드는 한 개 파일이 50k 라인을 넘을 만큼 복잡하게 얽혀있었다. 설계를 기반으로 구현하는 것이 기본인데, 관리자가 제시한 해결책은 구현을 기반으로 설계 문서를 작성하라는 것이었다.</p>

  <p>결국 개발팀은 약 3주 동안 설계 문서를 작성하다가 중단하고 말았다. 비극은 이 지시를 내린 관리자는 개발자들의 실력이 부족해서 자신의 지시를 따르지 못한다고 생각한다는 것이다.</p>

  <p>개발팀의 역량 강화가 필요한 상황이라면, 관리자가 직접 개입하는 대신 역량 있는 개발자를 충원했어야 한다.</p>
</blockquote>

<p>관리자와 팀장은 각자의 역할이 있다. 팀장이 관리자가 되어서는 안 되겠지만, 관리자도 팀장이 되려고 하면 안 된다. 관리자가 팀장의 역할을 하면 팀장은 자신의 역량을 제대로 발휘할 수 없고 관리자도 관리 업무에 집중할 수 없게 된다.</p>

<p>경험상 관리자가 개발을 직접 리드하는 것은 불가피한 상황이라기보다는 본인의 희망에 따른 선택인 경우가 많다. 쉽게 말하자면, 개발 리드가 관리자의 취미생활처럼 여겨진다. 현명한 관리자라면 팀장을 교체하거나 팀의 업무를 조정할 것이다.</p>

<p>이런 말이 있다.</p>

<p><strong>“의인불용 용인불의(疑人不用 用人不疑)”</strong></p>

<p>중국 사서 송사(宋史)에 나오는 말로, 의심 나는 사람은 쓰지 말고 쓴 사람은 의심하지 말라는 뜻이다.</p>

<blockquote>
  <p>특정 정보를 서비스하는 회사에서 팀원으로 일했을 때였다. 이 회사의 개발팀은 8명 내외였고, 대표는 명석한 인물이었으며 개발 팀장은 열정과 실력을 갖춘 존경받는 개발자였다.</p>

  <p>내가 이 회사에서 일하던 당시, 대표는 개발 과정에 적극적으로 개입했지만, 창업 초기였기 때문에 서비스 장애가 발생해도 서로 이해하는 분위기가 있었다.</p>

  <p>몇 년 후 퇴사하고 다시 찾아갔을 때, 개발 조직은 크게 바뀌어 있었다. 기존 개발자들은 독립된 공간에서 각자 명확하지 않은 업무를 하고 있었고, 중요한 업무는 대표가 직접 구성한 새로운 개발팀이 맡고 있었다. 이유를 물어보니, 대표가 품질 문제를 지속적으로 제기하다가 결국 자신이 직접 개발 리드를 선언하고 새로운 팀을 꾸린 것이었다.</p>

  <p>대표가 개발 리드를 하면서 얻은 것은 또 한 번의 큰 시행착오뿐이다. 이 경우에도 대표는 자신의 기준을 만족시킬 수 있는 개발자를 채용했어야 했다.</p>
</blockquote>

<h2 id="6-원리주의-팀장과-실용주의-팀장의-갈등">6. 원리주의 팀장과 실용주의 팀장의 갈등</h2>

<p><img src="/assets/images/principled-pragmatic-micro.webp" alt="" /></p>

<p>한 프로젝트에서 원리주의 팀장과 실용주의 팀장이 원만한 협력 관계를 유지한다면, 이는 그들이 싸울 여력이 없을 정도로 큰 위협이 존재한다는 의미이다. 예를 들어, 고객의 심한 갑질이나 고압적인 마이크로 매니저와 같은 상황이 있을 수 있다.</p>

<p>그것이 아니라면 API 설계 등 협력이 필요한 부분에서 원리주의 팀장과 실용주의 팀장은 사사건건 의견이 충돌할 것이다.</p>

<h3 id="61-원리주의-팀장의-입장">6.1. 원리주의 팀장의 입장</h3>

<p>원리주의 팀장은 실용주의 팀장이 자신의 발목을 잡는다고 생각한다.</p>

<p>실용주의 팀장은 API를 설계할 때 자신의 코드 변경을 최소화 하는 쪽으로 주장한다. 결과적으로 API가 직관적이지 않아서 이해하기 어렵고 원리주의 팀장이 더 많은 작업을 해야 한다.</p>

<p>프로젝트가 진행되면서 새로운 API가 필요하지만 실용주의 팀장은 기존 API를 사용할 수 있다면 비록 사용하기가 좀 불편하더라도 기존 API를 고수한다.</p>

<p>이렇듯 원리주의 팀장은 실용주의 팀장이 자신의 편의만을 추구하며 통찰력을 비롯한 개발 역량이 전반적으로 부족하다고 생각한다.</p>

<p>실용주의 팀장의 의견을 계속 따르면 결국 프로젝트에 큰 문제가 생길 것이라는 불안함을 떨치기 어렵다.</p>

<p>프로젝트의 설계가 오래되고 구조적 문제를 안고있지만 이것을 해결하기 위한 대규모 리팩토링 계획에 실용주의 팀장은 반대만 한다.</p>

<p>이렇게 단순한 개발 전략은 자신의 성장에도 도움이 되지 않는다.</p>

<h3 id="62-실용주의-팀장의-입장">6.2. 실용주의 팀장의 입장</h3>

<p>실용주의 팀장은 원리주의 팀장이 쓸데없이 일을 벌린다고 생각한다.</p>

<p>원리주의 팀장은 자신도 완벽하게 다루지 못하는 기술을 무리하게 도입함으로써 프로젝트를 불필요하게 복잡하게 만든다.</p>

<p>개인의 성장에만 집착한 나머지 프로젝트의 일정이나 성공은 뒷전으로 미룬다고 생각한다.</p>

<p>원리주의 팀장과 API를 합의했는데도 불구하고 원리주의 팀장이 계속해서 조금씩 변경을 요청할 수 있다. 원리주의 팀장이 디테일에 지나치게 집착하면서 프로젝트의 진행을 방해한다.</p>

<p>대규모 리팩토링이나 다시 만들어야 한다는 주장을 하지만 그런다고 해서 딱히 좋아질 것 같지 않고 좋아진다는 보장도 없다.</p>

<h3 id="63-마이크로-관리자의-중재">6.3. 마이크로 관리자의 중재</h3>

<p>마이크로 관리자는 의견 충돌이 발생하면 양측의 의견을 듣고 논리적으로 판단할 수 있다고 생각한다.</p>

<p>비록 마이크로 관리자는 공정하고 객관적으로 판단하려고 하겠지만, 이런 상황은 이미 원리주의 팀장이 불리한 입장에서 시작하게 된다.</p>

<p>무언가를 변경하려거나 새로운 기술이나 방법론을 적용하려는 것은 원리주의 팀장이다. 따라서 원리주의 팀장은 자신의 논리를 소프트웨어 개발 이론과 섞어가면서 장황하게 설명해야 한다.</p>

<p>반면에 실용주의 팀장은 가능한 변화를 최소화 하거나 간단한 해결책을 선호하기 때문에 자신의 논리를 쉽게 설명할 수 있다.</p>

<p>그래서 둘의 논쟁이 시작되면 실용주의 팀장은 원리주의 팀장의 주장에 ‘왜요?’라고 묻기만 하면 된다. 원리주의 팀장이 어지간한 지식이 있어도 실용주의 팀장의 ‘왜요?’ 공격을 방어하기는 쉽지 않다. 어느 순간 설명하기 어려운 지점에 이를 것이다. 더군다나 개발 지식이 부족한 마이크로 관리자까지 이해를 시켜야 하기 때문에 원리주의 팀장은 2:1로 논쟁하는 입장이 된다.</p>

<p>원리주의 팀장 자신도 제대로 알지 못하는 개발 이론을 마이크로 관리자에게 설명해봤자 설득력은 없을 것이다. 마이크로 관리자는 막연히 그럴듯 하다고 느낄 뿐이다. 결국 마이크로 관리자가 처음 생각했던 논리적인 판단은 어려워지고, 서로의 감정을 고려한 적절한 타협안을 제안하는 것이 보통이다.</p>

<p>마이크로 관리자는 이런 일이 반복되면 이해하기 쉬운 실용주의 팀장의 의견으로 기울게 된다. 더군다나 결과물도 비교적 빨리 확인할 수 있으니 마다할 이유가 없다.</p>

<p>혹은 마이크로 관리자가 둘이 잘 협의하라는 지시와 함께 중재를 포기하는 경우도 있는데, 이것은 최악의 선택이다. 마지막 브레이크마저 사라진 두 팀장의 갈등은 극한으로 치닫고 프로젝트를 무사히 마치지 못 할 것이다.</p>

<h3 id="64-해결-방안">6.4. 해결 방안</h3>

<p>애초에 두 팀장이 치열하게 논쟁해야 하는 상황을 만든 것은 마이크로 관리자다. 마이크로 관리자 자신이 팀장들을 중재할 수 있다는 착각과 개발을 리드하고 싶은 욕심이 합쳐져서 최종 결정권을 자신이 가졌을 확률이 높다.</p>

<p>이런 둘을 중재할 수 있는 것은 압도적인 경험과 역량을 갖춘 상위 기술 책임자 뿐이다. 정확하게는 상위 기술 책임자가 개발 팀장을 주도적으로 리드해야 한다. 개발 팀장들이 협의를 한다는 것은 상위 기술 책임자가 없기 때문이다. 문제는 일반적인 개발 팀장들이 납득할 수 있는 압도적인 경험과 역량을 갖춘 상위 기술 책임자를 찾는 것이 쉽지 않다는 것이다.</p>

<p>상위 기술 책임자가 없는 상황에서 관리자가 둘을 직접 중재하는 것은 어렵고 그렇다고 어느 한 쪽을 편들자니 다른 쪽이 반발하는 것이 부담스럽다. 그러나 손실을 각오하고 프로젝트의 특성에 따라서 명확하게 한 쪽에 책임과 관한을 부여하는 것이 장기적으로 좋을 것이다. 단기 외주 프로젝트라면 실용주의 팀장이 리드하고 지속적인 개선이 필요한 자사 프로덕트라면 원리주의 팀장이 리드하도록 해야 한다.</p>

<blockquote>
  <p>유럽에 본사를 둔 어느 회사에 근무했던 경험이다.</p>

  <p>이 회사는 상당히 큰 온라인 서비스를 개발하고 있었다. 여기에는 여러 개발팀이 하나의 서비스를 만들고 있었고 QA팀도 따로 있었다. 주목할만한 것은 아키텍트 팀이 있고 거기서도 최상위 아키텍트가 있었다는 것이다.</p>

  <p>이렇게 설계,구현,테스트로 조직이 나뉘어져 있었기 때문에 개발에 들어가기 전에 아키텍트, 개발팀, QA팀이 모여서 설계와 테스트 방법에 대해서 논의한다.</p>

  <p>이 회사에서 인터페이스를 포함한 설계에 대한 결정은 아키텍트 간에 이뤄졌기 때문에 개발팀 간에 불협화음을 찾기 어려웠다. 설계에 대해서 개발팀장과 아키텍트 사이에 의견이 다를 수는 있지만 설계 권한과 책임은 아키텍트에 있었기 때문에 문제가 되는 경우는 없었다.</p>
</blockquote>

<h2 id="7-결론">7. 결론</h2>

<p>원리주의와 실용주의가 다툼의 원인은 아니다. 이념에 차이가 있어도 서로에 대한 신뢰만 충분하다면 서로를 존중하며 프로젝트를 잘 진행할 수 있을 것이다.</p>

<p>다툼은 인간이기에 갖게 되는 개인 감정과 욕심 때문에 발생한다. 개인 감정과 욕심으로 인해 이해관계가 충돌하면 틈이 생기기 마련인데 서로 다른 이념이 이 틈을 크게 벌리는 것 뿐이다.</p>

<p>관리자 입장에서는 실용주의 개발자의 주장이 유용하게 생각될 것이다. 그런데 실용주의 개발을 계속했을 때 회사가 어떤 모습일지를 신중하게 고민해 봐야 한다.</p>

<p>원리주의 팀장의 개발 방식은 당장 성과가 나오는 것이 아니고 자기 주장도 강하고 오버 엔지니어링으로 비용이 높아진다. 이런 시행착오를 회사가 감당하지 못하고 실용주의로 흐른다면 결국 실용주의 개발자만 남을 것이다. 실용주의 개발자가 다수를 차지한 상황에서 관리자가 품질에 문제의식을 느끼고 원리주의 개발자를 채용해봤자 기존에 자리잡은 실용주의 팀장들의 텃새를 버티기는 힘들 것이다.</p>

<p>그렇다고 원리주의 개발자가 다수를 차지하면 연구에 전념하거나 실험적인 기술을 도입하면서 생산성이 급격하게 떨어질 수 있다. 개발 방법론에 대한 이해도 완전하지 않기 때문에 소프트웨어 품질이 크게 좋아지는 것도 아니다.</p>

<p>소프트웨어 품질을 중요하게 여기는 관리자는 원리주의 개발자의 시행착오가 어느 정도 가치를 가진다고 생각한다. 그러나 원리주의 개발자의 성장은 생각보다 더딜 수 있다.</p>

<p>이런 문제를 해결하려면 적어도 한 명의 유능한 상위 기술 책임자가 있어야 한다. 상위 기술 책임자는 원리주의 개발자의 시행착오를 크게 줄일 수 있고 실용주의 개발자를 적재적소에 배치할 것이다.</p>

<p>상위 기술 책임자를 확보할 수 없다면 결국 회사가 개발하는 제품의 성격에 따라서 개발자의 성향을 선택해야 할 것이다. 자사 프로덕트라면 실용주의 개발자는 최소화 해야 한다. 단기 외주 프로젝트라면 원리주의 개발자를 최소화 해야 한다. 기술부채가 쌓일수록 유지보수가 어려워지는 것처럼 당장 개발자가 부족하다는 이유로 채용 부채를 쌓게 되면 개발 조직의 유지가 어려워질 것이다.</p>]]></content><author><name>mannercode</name><email>mannercode@gmail.com</email></author><summary type="html"><![CDATA[]]></summary></entry></feed>